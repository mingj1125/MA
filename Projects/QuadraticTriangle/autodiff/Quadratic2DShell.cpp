#include "Quadratic2DShell.h"

std::vector<Vector<T, 2>> get_shape_function_nodes(){
    return {
        {0., 0.},
        {1., 0.},
        {0., 1.},
        {0.5, 0.},
        {0., 0.5},
        {0.5, 0.5}
    };
}

Matrix<T, 2, 6> compute2DdNdX(const Matrix<T,6,3> & undeformed_vertices, const Vector<T, 2> beta){

    T p[12];
    p[0] = undeformed_vertices(0,0); p[1] = undeformed_vertices(0,1);
    p[2] = undeformed_vertices(1,0); p[3] = undeformed_vertices(1,1);
    p[4] = undeformed_vertices(2,0); p[5] = undeformed_vertices(2,1);
    p[6] = undeformed_vertices(3,0); p[7] = undeformed_vertices(3,1);
    p[8] = undeformed_vertices(4,0); p[9] = undeformed_vertices(4,1);
    p[10] = undeformed_vertices(5,0); p[11] = undeformed_vertices(5,1);
    T t1 = beta[0] + beta[1];
    T t2 = -0.2e1 * t1 + 0.1e1;
    T t3 = 0.1e1 - beta[0] - beta[1];
    T t4 = 0.2e1 * beta[0] - 0.1e1;
    T t5 = -beta[0] + t3;
    T t6 = t2 * p[0];
    T t7 = t3 * p[0];
    T t8 = 0.4e1;
    T t9 = t8 * (t5 * p[6] + (-p[8] + p[10]) * beta[1]) + t4 * p[2] - t6 + 0.2e1 * beta[0] * p[2] - 0.2e1 * t7;
    T t10 = 0.2e1 * beta[1] - 0.1e1;
    T t11 = -beta[1] + t3;
    t2 = t2 * p[1];
    t3 = t3 * p[1];
    T t12 = t8 * (t11 * p[9] + (-p[7] + p[11]) * beta[0]) + t10 * p[5] - t2 + 0.2e1 * beta[1] * p[5] - 0.2e1 * t3;
    t6 = t8 * (t11 * p[8] + (-p[6] + p[10]) * beta[0]) + t10 * p[4] - t6 + 0.2e1 * beta[1] * p[4] - 0.2e1 * t7;
    t2 = t8 * (t5 * p[7] + (-p[9] + p[11]) * beta[1]) + t4 * p[3] - t2 + 0.2e1 * beta[0] * p[3] - 0.2e1 * t3;
    t3 = t12 * t9 - t2 * t6;
    t2 = -t2;
    t3 = 0.1e1 / t3;
    t1 = t3 * (t1 * t8 - 0.3e1);
    t4 = t8 * beta[0];
    t5 = -0.1e1 + t4;
    t7 = t8 * beta[1];
    t10 = -0.1e1 + t7;
    t11 = t8 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t13 = t8 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    t6 = -t6;
    Matrix<T, 2, 6> dNdX;
    dNdX(0,0) = t1 * (t12 + t2);
    dNdX(0,1) = t3 * t12 * t5;
    dNdX(0,2) = t3 * t2 * t10;
    dNdX(0,3) = t3 * (t11 * t12 - t4 * t2);
    dNdX(0,4) = t3 * (-t7 * t12 + t13 * t2);
    dNdX(0,5) = t8 * t3 * (t12 * beta[1] + t2 * beta[0]);
    dNdX(1,0) = t1 * (t9 + t6);
    dNdX(1,1) = t3 * t6 * t5;
    dNdX(1,2) = t3 * t9 * t10;
    dNdX(1,3) = t3 * (t11 * t6 - t4 * t9);
    dNdX(1,4) = t3 * (t13 * t9 - t7 * t6);
    dNdX(1,5) = t8 * t3 * (t6 * beta[1] + t9 * beta[0]);

    return dNdX;
}

Matrix<T, 2, 6> compute2DdNdx(const Matrix<T,3,1> & x1, const Matrix<T,3,1> & x2, 
        const Matrix<T,3,1> & x3, const Vector<T, 2> beta){
    T q[6];
    q[0] = x1(0,0); q[1] = x1(1,0);
    q[2] = x2(0,0); q[3] = x2(1,0);
    q[4] = x3(0,0); q[5] = x3(1,0);        
    T t1 = beta[1] + beta[0];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = q[0] + q[2];
    T t7 = q[0] + q[4];
    T t8 = q[2] + q[4];
    T t9 = t3 * q[0];
    T t10 = t2 * (t4 * (-q[0] + t6) + (q[2] - t6) * beta[0] + (-t7 + t8) * beta[1]) + t5 * q[2] - t9;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = q[1] + q[3];
    T t13 = q[1] + q[5];
    T t14 = q[3] + q[5];
    t3 = t3 * q[1];
    T t15 = t11 * q[5] - t2 * (t4 * (q[1] - t13) + (t12 - t14) * beta[0] + (-q[5] + t13) * beta[1]) - t3;
    t6 = t2 * (t4 * (-q[0] + t7) + (-t6 + t8) * beta[0] + (q[4] - t7) * beta[1]) + t11 * q[4] - t9;
    t2 = -t2 * (t4 * (q[1] - t12) + (-q[3] + t12) * beta[0] + (t13 - t14) * beta[1]) + t5 * q[3] - t3;
    t3 = t10 * t15 - t2 * t6;
    t2 = -t2;
    t3 = 0.1e1 / t3;
    t1 = t3 * (0.4e1 * t1 - 0.3e1);
    t4 = 0.4e1 * beta[0];
    t5 = -0.1e1 + t4;
    t7 = 0.4e1 * beta[1];
    t8 = -0.1e1 + t7;
    t9 = -0.8e1 * beta[0] + 0.4e1 - 0.4e1 * beta[1];
    t11 = 0.4e1 - 0.4e1 * beta[0] - 0.8e1 * beta[1];
    t6 = -t6;
    Matrix<T, 2, 6> dNdx;
    dNdx(0,0) = t1 * (t15 + t2);
    dNdx(0,1) = t3 * t15 * t5;
    dNdx(0,2) = t3 * t2 * t8;
    dNdx(0,3) = t3 * (t15 * t9 - t4 * t2);
    dNdx(0,4) = t3 * (t11 * t2 - t7 * t15);
    dNdx(0,5) = 0.4e1 * t3 * (t15 * beta[1] + t2 * beta[0]);
    dNdx(1,0) = t1 * (t10 + t6);
    dNdx(1,1) = t3 * t6 * t5;
    dNdx(1,2) = t3 * t10 * t8;
    dNdx(1,3) = t3 * (-t4 * t10 + t6 * t9);
    dNdx(1,4) = t3 * (t10 * t11 - t7 * t6);
    dNdx(1,5) = 0.4e1 * t3 * (t10 * beta[0] + t6 * beta[1]);

    return dNdx;
}

T computePointEnergyDensity(T lambda, T mu, const Matrix<T,6,3> & vertices, const Matrix<T,6,3> & undeformed_vertices, const Vector<T, 2> beta){
        
        // Matrix<T, 2, 2> F = compute2DDeformationGradient(x1, x2, x3, x1Undef, x2Undef, x3Undef, beta);
        // Matrix<T, 2, 2> green_strain = 0.5*(F.transpose()*F-Matrix<T, 2, 2>::Identity());
        // T energy_density = 0.5*lambda*green_strain.trace()*green_strain.trace() + mu*green_strain.squaredNorm();
    T q[12];
    q[0] = vertices(0,0); q[1] = vertices(0,1);
    q[2] = vertices(1,0); q[3] = vertices(1,1);
    q[4] = vertices(2,0); q[5] = vertices(2,1);   
    q[6] = vertices(3,0); q[7] = vertices(3,1);
    q[8] = vertices(4,0); q[9] = vertices(4,1);
    q[10] = vertices(5,0); q[11] = vertices(5,1);   
    T p[12];
    p[0] = undeformed_vertices(0,0); p[1] = undeformed_vertices(0,1);
    p[2] = undeformed_vertices(1,0); p[3] = undeformed_vertices(1,1);
    p[4] = undeformed_vertices(2,0); p[5] = undeformed_vertices(2,1);
    p[6] = undeformed_vertices(3,0); p[7] = undeformed_vertices(3,1);
    p[8] = undeformed_vertices(4,0); p[9] = undeformed_vertices(4,1);
    p[10] = undeformed_vertices(5,0); p[11] = undeformed_vertices(5,1);
    T t1 = q[0];
    T t2 = beta[0];
    T t3 = 0.2e1 * t2;
    T t4 = beta[1];
    T t5 = 0.2e1 * t4;
    T t6 = 0.1e1 - t3 - t5;
    T t7 = p[0];
    T t8 = t7 * t6;
    T t9 = 0.1e1 - t2 - t4;
    T t11 = 0.2e1 * t7 * t9;
    T t12 = t3 - 0.1e1;
    T t13 = p[2];
    T t17 = p[6];
    T t19 = 0.4e1 * t17 * t2;
    T t22 = p[8];
    T t24 = 0.4e1 * t22 * t4;
    T t25 = p[10];
    T t28 = t13 * t12 + 0.2e1 * t13 * t2 + 0.4e1 * t17 * t9 + 0.4e1 * t25 * t4 - t11 - t19 - t24 - t8;
    T t29 = p[1];
    T t30 = t29 * t6;
    T t32 = 0.2e1 * t29 * t9;
    T t33 = t5 - 0.1e1;
    T t34 = p[5];
    T t38 = p[7];
    T t40 = 0.4e1 * t38 * t2;
    T t41 = p[9];
    T t45 = 0.4e1 * t41 * t4;
    T t46 = p[11];
    T t49 = 0.4e1 * t46 * t2 + t34 * t33 + 0.2e1 * t34 * t4 + 0.4e1 * t41 * t9 - t30 - t32 - t40 - t45;
    T t51 = p[4];
    T t59 = 0.4e1 * t25 * t2 + 0.4e1 * t22 * t9 + t51 * t33 + 0.2e1 * t51 * t4 - t11 - t19 - t24 - t8;
    T t60 = p[3];
    T t68 = t60 * t12 + 0.2e1 * t60 * t2 + 0.4e1 * t38 * t9 + 0.4e1 * t46 * t4 - t30 - t32 - t40 - t45;
    T t71 = 0.1e1 / (t49 * t28 - t68 * t59);
    T t72 = t49 * t71;
    T t73 = 0.4e1 * t2;
    T t74 = 0.4e1 * t4;
    T t75 = -0.3e1 + t73 + t74;
    T t77 = -t68;
    T t78 = t77 * t71;
    T t80 = t75 * t72 + t75 * t78;
    T t83 = t71 * q[2];
    T t84 = t73 - 0.1e1;
    T t85 = t84 * t49;
    T t88 = t71 * q[4];
    T t89 = t74 - 0.1e1;
    T t90 = t89 * t77;
    T t92 = q[6];
    T t94 = -0.8e1 * t2 + 0.4e1 - t74;
    T t96 = t2 * t78;
    T t98 = t94 * t72 - 0.4e1 * t96;
    T t100 = q[8];
    T t101 = t4 * t72;
    T t104 = 0.4e1 - t73 - 0.8e1 * t4;
    T t106 = t104 * t78 - 0.4e1 * t101;
    T t108 = q[10];
    T t110 = 0.4e1 * t101 + 0.4e1 * t96;
    T t112 = t80 * t1 + t106 * t100 + t110 * t108 + t85 * t83 + t90 * t88 + t98 * t92;
    T t113 = t112 * t112;
    T t114 = 0.5e0 * t113;
    T t115 = q[1];
    T t118 = t71 * q[3];
    T t121 = t71 * q[5];
    T t123 = q[7];
    T t125 = q[9];
    T t127 = q[11];
    T t129 = t106 * t125 + t110 * t127 + t80 * t115 + t85 * t118 + t90 * t121 + t98 * t123;
    T t130 = t129 * t129;
    T t131 = 0.5e0 * t130;
    T t132 = t71 * t28;
    T t133 = t49 * t132;
    T t135 = t71 * t59;
    T t137 = 0.5e0 * t77 * t135;
    T t138 = -t59;
    T t139 = t138 * t71;
    T t142 = t75 * t132 + t75 * t139;
    T t144 = t84 * t138;
    T t146 = t89 * t28;
    T t149 = t2 * t132;
    T t151 = t94 * t139 - 0.4e1 * t149;
    T t153 = t4 * t139;
    T t156 = t104 * t132 - 0.4e1 * t153;
    T t159 = 0.4e1 * t153 + 0.4e1 * t149;
    T t161 = t142 * t1 + t156 * t100 + t159 * t108 + t144 * t83 + t146 * t88 + t151 * t92;
    T t162 = t161 * t161;
    T t163 = 0.5e0 * t162;
    T t170 = t142 * t115 + t144 * t118 + t146 * t121 + t151 * t123 + t156 * t125 + t159 * t127;
    T t171 = t170 * t170;
    T t172 = 0.5e0 * t171;
    T t173 = t71 * t68;
    T t175 = 0.5e0 * t138 * t173;
    T t177 = pow(t114 + t131 - 0.10e1 * t133 - t137 + t163 + t172 - t175, 0.2e1);
    T t180 = 0.5e0 * t133;
    T t182 = pow(t114 + t131 - t180 - t137, 0.2e1);
    T t184 = 0.5e0 * t161 * t112;
    T t186 = 0.5e0 * t170 * t129;
    T t200 = pow(t163 + t172 - t175 - t180, 0.2e1);
    T energy_density = 0.5e0 * t177 * lambda + (t182 + 0.2e1 * (t184 + t186 - 0.5e0 * t49 * t173 - 0.5e0 * t77 * t72) * (t184 + t186 - 0.5e0 * t138 * t132 - 0.5e0 * t28 * t135) + t200) * mu;
        
    return energy_density;
}

Vector<T, 18> computePointEnergyDensityGradient(T lambda, T mu, const Matrix<T,6,3> & vertices, const Matrix<T,6,3> & undeformed_vertices, const Vector<T, 2> beta){
        
    T q[12];
    q[0] = vertices(0,0); q[1] = vertices(0,1);
    q[2] = vertices(1,0); q[3] = vertices(1,1);
    q[4] = vertices(2,0); q[5] = vertices(2,1);   
    q[6] = vertices(3,0); q[7] = vertices(3,1);
    q[8] = vertices(4,0); q[9] = vertices(4,1);
    q[10] = vertices(5,0); q[11] = vertices(5,1);   
    T p[12];
    p[0] = undeformed_vertices(0,0); p[1] = undeformed_vertices(0,1);
    p[2] = undeformed_vertices(1,0); p[3] = undeformed_vertices(1,1);
    p[4] = undeformed_vertices(2,0); p[5] = undeformed_vertices(2,1);
    p[6] = undeformed_vertices(3,0); p[7] = undeformed_vertices(3,1);
    p[8] = undeformed_vertices(4,0); p[9] = undeformed_vertices(4,1);
    p[10] = undeformed_vertices(5,0); p[11] = undeformed_vertices(5,1);
    T t1 = beta[1] + beta[0];
    T t2 = -0.2e1 * t1 + 0.1e1;
    T t3 = 0.1e1 - beta[0] - beta[1];
    T t4 = 0.2e1 * beta[0] - 0.1e1;
    T t5 = beta[0] - t3;
    T t6 = t3 * p[0];
    T t7 = t2 * p[0];
    T t8 = 0.4e1;
    T t9 = -t8 * (t5 * p[6] + (p[8] - p[10]) * beta[1]) + 0.2e1 * beta[0] * p[2] - 0.2e1 * t6 + t4 * p[2] - t7;
    T t10 = 0.2e1 * beta[1] - 0.1e1;
    T t11 = beta[1] - t3;
    t3 = t3 * p[1];
    t2 = t2 * p[1];
    T t12 = -t8 * (t11 * p[9] + (p[7] - p[11]) * beta[0]) + 0.2e1 * beta[1] * p[5] - 0.2e1 * t3 + t10 * p[5] - t2;
    t6 = -t8 * (t11 * p[8] + (p[6] - p[10]) * beta[0]) + 0.2e1 * beta[1] * p[4] - 0.2e1 * t6 + t10 * p[4] - t7;
    t2 = -t8 * (t5 * p[7] + (p[9] - p[11]) * beta[1]) + 0.2e1 * beta[0] * p[3] - 0.2e1 * t3 + t4 * p[3] - t2;
    t3 = t9 * t12;
    t4 = t6 * t2 - t3;
    t5 = -t2;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t8 - 0.3e1);
    t7 = t1 * (t12 + t5);
    t10 = t8 * beta[0];
    t11 = -0.1e1 + t10;
    T t13 = t8 * beta[1];
    T t14 = -0.1e1 + t13;
    T t15 = t8 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t16 = t4 * (t10 * t5 - t12 * t15);
    T t17 = t8 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t18 = t4 * (t13 * t12 - t17 * t5);
    T t19 = t4 * (t12 * beta[1] + t5 * beta[0]);
    T t20 = t8 * q[10];
    T t21 = -t20 * t19 + t16 * q[6] + t18 * q[8] - t4 * (q[2] * t12 * t11 + q[4] * t5 * t14) - t7 * q[0];
    T t22 = t8 * q[11];
    T t23 = -t22 * t19 + t16 * q[7] + t18 * q[9] - t4 * (q[3] * t12 * t11 + q[5] * t5 * t14) - t7 * q[1];
    T t24 = -t6;
    t1 = t1 * (t9 + t24);
    t10 = t4 * (t10 * t9 - t15 * t24);
    t13 = t4 * (t13 * t24 - t17 * t9);
    t15 = t4 * (t24 * beta[1] + t9 * beta[0]);
    t17 = -t20 * t15 - t1 * q[0] + t10 * q[6] + t13 * q[8] - t4 * (q[2] * t11 * t24 + q[4] * t9 * t14);
    t20 = -t22 * t15 - t1 * q[1] + t10 * q[7] + t13 * q[9] - t4 * (q[3] * t11 * t24 + q[5] * t9 * t14);
    t22 = pow(t17, 0.2e1);
    T t25 = pow(t21, 0.2e1);
    T t26 = pow(t20, 0.2e1);
    T t27 = pow(t23, 0.2e1);
    T t28 = t6 * t5;
    T t29 = t2 * t24;
    T t30 = 0.1e1 / 0.2e1;
    T t31 = t17 * t1;
    T t32 = t21 * t7;
    T t33 = t4 * (t3 + t28) + t25 + t27;
    T t34 = t21 * t17;
    T t35 = t23 * t20;
    T t36 = t4 * (t3 + t29) + t22 + t26;
    t2 = 0.2e1 * t34 + 0.2e1 * t35 + t12 * t4 * (t2 + t5) + t9 * t4 * (t6 + t24);
    t3 = lambda * (t30 * (t4 * (t28 + t29) + t22 + t25 + t26 + t27) + t3 * t4);
    t6 = t23 * t7;
    t22 = t20 * t1;
    t25 = t17 * t24;
    t26 = t21 * t12;
    t11 = t4 * t11;
    t27 = t20 * t24;
    t28 = t23 * t12;
    t29 = t21 * t5;
    t34 = t17 * t9;
    t4 = t4 * t14;
    t14 = t23 * t5;
    t35 = t20 * t9;
    T t37 = t17 * t10;
    T t38 = t21 * t16;
    t37 = mu * (t30 * (t10 * t21 + t16 * t17) * t2 + t38 * t33 + t37 * t36) + t3 * (t37 + t38);
    t38 = t23 * t16;
    T t39 = t20 * t10;
    t10 = mu * (t30 * (t10 * t23 + t16 * t20) * t2 + t38 * t33 + t39 * t36) + t3 * (t38 + t39);
    t16 = t17 * t13;
    t38 = t21 * t18;
    t16 = mu * (t16 * t36 + t30 * (t13 * t21 + t17 * t18) * t2 + t38 * t33) + t3 * (t16 + t38);
    t38 = t20 * t13;
    t39 = t23 * t18;
    t13 = mu * (t30 * (t13 * t23 + t18 * t20) * t2 + t39 * t33 + t38 * t36) + t3 * (t38 + t39);
    t18 = t21 * t19;
    t38 = t17 * t15;
    t39 = t3 * t8;
    t18 = mu * (-t8 * (t18 * t33 + t38 * t36) - 0.2e1 * (t15 * t21 + t17 * t19) * t2) - t39 * (t18 + t38);
    t38 = t23 * t19;
    T t40 = t20 * t15;
    t8 = mu * (-t8 * (t38 * t33 + t40 * t36) - 0.2e1 * (t15 * t23 + t20 * t19) * t2) - t39 * (t40 + t38);
    Vector<T, 18> energy_gradient; energy_gradient.setZero();
    T gradient[12];
    gradient[0] = mu * (-t30 * (t1 * t21 + t17 * t7) * t2 - t31 * t36 - t32 * t33) - t3 * (t31 + t32);
    gradient[1] = mu * (-t22 * t36 - t30 * (t1 * t23 + t20 * t7) * t2 - t6 * t33) - t3 * (t6 + t22);
    gradient[2] = mu * (-t30 * t11 * (t12 * t17 + t21 * t24) * t2 - t11 * (t25 * t36 + t26 * t33)) - t3 * t11 * (t25 + t26);
    gradient[3] = mu * (-t30 * t11 * (t12 * t20 + t23 * t24) * t2 - t11 * (t27 * t36 + t28 * t33)) - t3 * t11 * (t27 + t28);
    gradient[4] = mu * (-t30 * t4 * (t17 * t5 + t21 * t9) * t2 - t4 * (t29 * t33 + t34 * t36)) - t3 * t4 * (t29 + t34);
    gradient[5] = mu * (-t30 * t4 * (t20 * t5 + t23 * t9) * t2 - t4 * (t14 * t33 + t35 * t36)) - t3 * t4 * (t35 + t14);
    gradient[6] = t37;
    gradient[7] = t10;
    gradient[8] = t16;
    gradient[9] = t13;
    gradient[10] = t18;
    gradient[11] = t8;
    for(int i = 0; i < 6; ++i){
        energy_gradient(3*i) = gradient[2*i];
        energy_gradient(3*i+1) = gradient[2*i+1];
    }

    return energy_gradient;
}

void computeHessianc1(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    
    T t1 = beta[1] + beta[0];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = beta[0] - t4;
    T t7 = t4 * p[0];
    T t8 = t3 * p[0];
    T t9 = 0.4e1;
    T t10 = t2 * (beta[0] * p[2] - t7) - t9 * (t6 * p[6] + (p[8] - p[10]) * beta[1]) + t5 * p[2] - t8;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = beta[1] - t4;
    t4 = t4 * p[1];
    t3 = t3 * p[1];
    T t13 = t2 * (beta[1] * p[5] - t4) - t9 * (t12 * p[9] + (p[7] - p[11]) * beta[0]) + t11 * p[5] - t3;
    t7 = t2 * (beta[1] * p[4] - t7) - t9 * (t12 * p[8] + (p[6] - p[10]) * beta[0]) + t11 * p[4] - t8;
    t3 = t2 * (beta[0] * p[3] - t4) - t9 * (t6 * p[7] + (p[9] - p[11]) * beta[1]) + t5 * p[3] - t3;
    t4 = t10 * t13;
    t5 = -t7 * t3 + t4;
    t5 = 0.1e1 / t5;
    t1 = t5 * (t1 * t9 - 0.3e1);
    t6 = t1 * (t13 - t3);
    t8 = t9 * beta[0];
    t11 = -0.1e1 + t8;
    t12 = t9 * beta[1];
    T t14 = -0.1e1 + t12;
    T t15 = t9 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t16 = t5 * (t13 * t15 + t8 * t3);
    T t17 = t9 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t18 = t5 * (-t12 * t13 - t17 * t3);
    T t19 = t5 * (t13 * beta[1] - t3 * beta[0]);
    T t20 = t9 * q[10];
    T t21 = t20 * t19 + t16 * q[6] + t18 * q[8] + t5 * (q[2] * t13 * t11 - q[4] * t3 * t14) + t6 * q[0];
    T t22 = -t7;
    t1 = t1 * (t10 + t22);
    t8 = t5 * (-t8 * t10 + t15 * t22);
    t12 = t5 * (t10 * t17 - t12 * t22);
    t15 = t5 * (t10 * beta[0] + t22 * beta[1]);
    t17 = t20 * t15 + t1 * q[0] + t12 * q[8] + t5 * (q[4] * t10 * t14 + q[2] * t11 * t22) + t8 * q[6];
    t20 = t1 * t17 + t21 * t6;
    T t23 = t9 * q[11];
    T t24 = t23 * t19 + t16 * q[7] + t18 * q[9] + t5 * (q[3] * t13 * t11 - q[5] * t3 * t14) + t6 * q[1];
    t23 = t23 * t15 + t1 * q[1] + t12 * q[9] + t5 * (q[5] * t10 * t14 + q[3] * t11 * t22) + t8 * q[7];
    T t25 = pow(t23, 0.2e1);
    T t26 = pow(t21, 0.2e1);
    T t27 = pow(t17, 0.2e1);
    T t28 = pow(t24, 0.2e1);
    T t29 = t3 * t22;
    T t30 = -t7 * t3;
    T t31 = -0.1e1 / 0.2e1;
    T t32 = t31 * (t5 * (t30 + t29) - t25 - t26 - t27 - t28) - t4 * t5;
    T t33 = pow(t1, 0.2e1);
    T t34 = pow(t6, 0.2e1);
    t28 = t5 * (t30 + t4) - t26 - t28;
    t30 = t21 * t17;
    T t35 = t24 * t23;
    T t36 = t13 * t5;
    t36 = t1 * t21 + t17 * t6;
    t7 = -0.2e1 * t30 - 0.2e1 * t35 + t10 * t5 * (t7 + t22);
    t4 = (t5 * (t29 + t4) - t25 - t27) * t1;
    t11 = t5 * t11;
    t25 = t13 * t6;
    t29 = t22 * t1;
    t5 = t5 * t14;
    t14 = -t3 * t6;
    t30 = t10 * t1;
    t35 = (t20 * t5 * (t10 * t17 - t21 * t3) + t32 * t5 * (t30 + t14)) * lambda + mu * (t2 * t5 * (t14 * t26 + t30 * t27) + t31 * t5 * (-t1 * t3 + t10 * t6) * t7 + t36 * t5 * (t10 * t21 - t17 * t3) - t5 * (t4 * t10 + t14 * t28));
    t3 = mu * (t2 * t5 * (t14 * t24 * t21 + t30 * t23 * t17) + t36 * t5 * (t10 * t24 - t23 * t3)) + lambda * t5 * (t10 * t23 - t24 * t3) * t20;
    t5 = t16 * t6;
    t10 = t8 * t1;
    t14 = (t20 * (t16 * t21 + t17 * t8) + t32 * (t5 + t10)) * lambda + mu * (t2 * (t10 * t27 + t5 * t26) + t31 * (t1 * t16 + t6 * t8) * t7 + t36 * (t16 * t17 + t21 * t8) - t5 * t28 - t4 * t8);
    t5 = mu * (t2 * (t10 * t23 * t17 + t5 * t24 * t21) + t36 * (t16 * t23 + t24 * t8)) + lambda * (t16 * t24 + t23 * t8) * t20;
    t8 = t18 * t6;
    t10 = t12 * t1;
    t16 = (t20 * (t12 * t17 + t18 * t21) + t32 * (t10 + t8)) * lambda + mu * (t2 * (t10 * t27 + t8 * t26) + t31 * (t1 * t18 + t12 * t6) * t7 + t36 * (t12 * t21 + t17 * t18) - t4 * t12 - t8 * t28);
    t8 = mu * (t2 * (t10 * t23 * t17 + t24 * t8 * t21) + t36 * (t12 * t24 + t18 * t23)) + lambda * (t12 * t23 + t18 * t24) * t20;
    t10 = t15 * t1;
    t12 = t19 * t6;
    t18 = mu * (-t2 * (t1 * t19 + t15 * t6) * t7 - t9 * (-t36 * (t15 * t21 + t17 * t19) + t4 * t15 + t12 * t28) + 0.8e1 * t10 * t27 + 0.8e1 * t12 * t26) + t9 * lambda * (t20 * (t15 * t17 + t19 * t21) + t32 * (t10 + t12));
    t9 = mu * (0.8e1 * t10 * t23 * t17 + 0.8e1 * t12 * t24 * t21 + t9 * t36 * (t15 * t24 + t23 * t19)) + t9 * lambda * (t23 * t15 + t19 * t24) * t20;
    Vector<T, 12> hessianc1;
    hessianc1[0] = (t32 * (t33 + t34) + pow(t20, 0.2e1)) * lambda + mu * (t2 * (t26 * t34 + t27 * t33) - t1 * (t6 * t7 + t4) - t28 * t34 + pow(t36, 0.2e1));
    hessianc1[1] = mu * (t2 * (t23 * t33 * t17 + t24 * t34 * t21) + t36 * (t1 * t24 + t23 * t6)) + lambda * (t1 * t23 + t24 * t6) * t20;
    hessianc1[2] = (t20 * t11 * (t13 * t21 + t17 * t22) + t32 * t11 * (t29 + t25)) * lambda + mu * (t2 * t11 * (t25 * t26 + t29 * t27) + t31 * t11 * (t1 * t13 + t22 * t6) * t7 + t36 * t11 * (t13 * t17 + t21 * t22) - t11 * (t4 * t22 + t25 * t28));
    hessianc1[3] = mu * (t2 * t11 * (t29 * t23 * t17 + t25 * t24 * t21) + t36 * t11 * (t13 * t23 + t22 * t24)) + lambda * t11 * (t13 * t24 + t22 * t23) * t20;
    hessianc1[4] = t35;
    hessianc1[5] = t3;
    hessianc1[6] = t14;
    hessianc1[7] = t5;
    hessianc1[8] = t16;
    hessianc1[9] = t8;
    hessianc1[10] = t18;
    hessianc1[11] = t9;
    hessian.col(0) = hessianc1;
}

void computeHessianc2(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[1] + beta[0];
    T t2 = -0.2e1 * t1 + 0.1e1;
    T t3 = 0.1e1 - beta[0] - beta[1];
    T t4 = 0.2e1 * beta[0] - 0.1e1;
    T t5 = beta[0] - t3;
    T t6 = t3 * p[0];
    T t7 = t2 * p[0];
    T t8 = 0.4e1;
    T t9 = -t8 * (t5 * p[6] + (p[8] - p[10]) * beta[1]) + 0.2e1 * beta[0] * p[2] - 0.2e1 * t6 + t4 * p[2] - t7;
    T t10 = 0.2e1 * beta[1] - 0.1e1;
    T t11 = beta[1] - t3;
    t3 = t3 * p[1];
    t2 = t2 * p[1];
    T t12 = -t8 * (t11 * p[9] + (p[7] - p[11]) * beta[0]) + 0.2e1 * beta[1] * p[5] - 0.2e1 * t3 + t10 * p[5] - t2;
    t6 = -t8 * (t11 * p[8] + (p[6] - p[10]) * beta[0]) + 0.2e1 * beta[1] * p[4] - 0.2e1 * t6 + t10 * p[4] - t7;
    t2 = -t8 * (t5 * p[7] + (p[9] - p[11]) * beta[1]) + 0.2e1 * beta[0] * p[3] - 0.2e1 * t3 + t4 * p[3] - t2;
    t3 = t9 * t12;
    t4 = t6 * t2 - t3;
    t5 = -t2;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t8 - 0.3e1);
    t7 = t1 * (t12 + t5);
    t10 = t8 * beta[0];
    t11 = -0.1e1 + t10;
    T t13 = t8 * beta[1];
    T t14 = -0.1e1 + t13;
    T t15 = t8 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t16 = t4 * (t10 * t5 - t12 * t15);
    T t17 = t8 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t18 = t4 * (t13 * t12 - t17 * t5);
    T t19 = t4 * (t12 * beta[1] + t5 * beta[0]);
    T t20 = t8 * q[11];
    T t21 = -t20 * t19 + t16 * q[7] + t18 * q[9] - t4 * (q[3] * t12 * t11 + q[5] * t5 * t14) - t7 * q[1];
    T t22 = -t6;
    t1 = t1 * (t9 + t22);
    t10 = t4 * (t10 * t9 - t15 * t22);
    t13 = t4 * (t13 * t22 - t17 * t9);
    t15 = t4 * (t22 * beta[1] + t9 * beta[0]);
    t17 = -t20 * t15 - t1 * q[1] + t10 * q[7] + t13 * q[9] - t4 * (q[3] * t11 * t22 + q[5] * t9 * t14);
    t20 = t1 * t17 + t21 * t7;
    T t23 = t8 * q[10];
    T t24 = -t23 * t19 + t16 * q[6] + t18 * q[8] - t4 * (q[2] * t12 * t11 + q[4] * t5 * t14) - t7 * q[0];
    t23 = -t23 * t15 - t1 * q[0] + t10 * q[6] + t13 * q[8] - t4 * (q[2] * t11 * t22 + q[4] * t9 * t14);
    T t25 = t23 * t1;
    T t26 = t24 * t7;
    T t27 = t1 * t21 + t17 * t7;
    T t28 = pow(t7, 0.2e1);
    T t29 = pow(t1, 0.2e1);
    T t30 = lambda * t20;
    T t31 = pow(t23, 0.2e1);
    T t32 = pow(t24, 0.2e1);
    T t33 = pow(t17, 0.2e1);
    T t34 = pow(t21, 0.2e1);
    T t35 = t6 * t5;
    T t36 = t2 * t22;
    T t37 = 0.1e1 / 0.2e1;
    T t38 = t37 * (t4 * (t35 + t36) + t31 + t32 + t33 + t34) + t3 * t4;
    t32 = t4 * (t35 + t3) + t32 + t34;
    t35 = t24 * t23;
    T t39 = t21 * t17;
    t3 = t4 * (t36 + t3) + t31 + t33;
    t2 = t12 * t4 * (t2 + t5) + 0.2e1 * t35 + 0.2e1 * t39 + t9 * t4 * (t6 + t22);
    t6 = t3 * t1;
    t11 = t4 * t11;
    t31 = t17 * t22;
    t35 = t21 * t12;
    t36 = t12 * t7;
    t39 = t22 * t1;
    t4 = t4 * t14;
    t14 = t21 * t5;
    T t40 = t17 * t9;
    T t41 = mu * (t27 * t4 * (t23 * t5 + t24 * t9) + 0.2e1 * t4 * (t14 * t26 + t40 * t25)) + t30 * t4 * (t23 * t9 + t24 * t5);
    T t42 = t5 * t7;
    T t43 = t9 * t1;
    t4 = (t20 * t4 * (t14 + t40) + t38 * t4 * (t42 + t43)) * lambda + mu * (t37 * t4 * (t1 * t5 + t7 * t9) * t2 + t27 * t4 * (t17 * t5 + t21 * t9) + t4 * (t42 * t32 + t6 * t9) + 0.2e1 * t4 * (t43 * t33 + t42 * t34));
    t5 = t21 * t16;
    t9 = t17 * t10;
    t14 = t16 * t7;
    t40 = t10 * t1;
    t14 = -(t20 * (t9 + t5) + t38 * (t14 + t40)) * lambda + mu * (-t37 * (t1 * t16 + t10 * t7) * t2 - t27 * (t10 * t21 + t16 * t17) - t14 * t32 - t6 * t10 - 0.2e1 * t14 * t34 - 0.2e1 * t40 * t33);
    t40 = t21 * t18;
    t42 = t17 * t13;
    t43 = mu * (-t27 * (t13 * t24 + t18 * t23) - 0.2e1 * t42 * t25 - 0.2e1 * t40 * t26) - t30 * (t13 * t23 + t18 * t24);
    T t44 = t18 * t7;
    T t45 = t13 * t1;
    t13 = -(t20 * (t42 + t40) + t38 * (t45 + t44)) * lambda + mu * (-t37 * (t1 * t18 + t13 * t7) * t2 - t27 * (t13 * t21 + t17 * t18) - t44 * t32 - t13 * t6 - 0.2e1 * t45 * t33 - 0.2e1 * t44 * t34);
    t18 = t17 * t15;
    t40 = t21 * t19;
    t42 = mu * (0.8e1 * t18 * t25 + 0.8e1 * t40 * t26 + t8 * t27 * (t15 * t24 + t23 * t19)) + t30 * t8 * (t23 * t15 + t19 * t24);
    t44 = t19 * t7;
    t45 = t15 * t1;
    t8 = mu * (t8 * (t27 * (t15 * t21 + t17 * t19) + t6 * t15 + t44 * t32) + 0.2e1 * (t1 * t19 + t15 * t7) * t2 + 0.8e1 * t45 * t33 + 0.8e1 * t44 * t34) + t8 * lambda * (t20 * (t18 + t40) + t38 * (t45 + t44));
    Vector<T,12> hessianc2;
    hessianc2[0] = mu * ((t1 * t24 + t23 * t7) * t27 + 0.2e1 * t17 * t29 * t23 + 0.2e1 * t21 * t28 * t24) + t30 * (t25 + t26);
    hessianc2[1] = (t38 * (t29 + t28) + pow(t20, 0.2e1)) * lambda + mu * (t1 * (t2 * t7 + t6) + pow(t27, 0.2e1) + t28 * t32 + 0.2e1 * t28 * t34 + 0.2e1 * t29 * t33);
    hessianc2[2] = mu * (t27 * t11 * (t12 * t23 + t22 * t24) + 0.2e1 * t11 * (t25 * t31 + t26 * t35)) + t30 * t11 * (t12 * t24 + t22 * t23);
    hessianc2[3] = (t20 * t11 * (t31 + t35) + t38 * t11 * (t36 + t39)) * lambda + mu * (t37 * t11 * (t1 * t12 + t22 * t7) * t2 + 0.2e1 * t11 * (t39 * t33 + t36 * t34) + t27 * t11 * (t12 * t17 + t21 * t22) + t11 * (t39 * t3 + t36 * t32));
    hessianc2[4] = t41;
    hessianc2[5] = t4;
    hessianc2[6] = mu * (-t27 * (t10 * t24 + t16 * t23) - 0.2e1 * t9 * t25 - 0.2e1 * t5 * t26) - t30 * (t10 * t23 + t16 * t24);
    hessianc2[7] = t14;
    hessianc2[8] = t43;
    hessianc2[9] = t13;
    hessianc2[10] = t42;
    hessianc2[11] = t8;hessian(1,0) = mu * ((t1 * t24 + t23 * t7) * t27 + 0.2e1 * t17 * t29 * t23 + 0.2e1 * t21 * t28 * t24) + t30 * (t26 + t25);
    hessian.col(1) = hessianc2;
}

void computeHessianc3(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[1] + beta[0];
    T t2 = -0.2e1 * t1 + 0.1e1;
    T t3 = 0.1e1 - beta[0] - beta[1];
    T t4 = 0.2e1 * beta[0] - 0.1e1;
    T t5 = beta[0] - t3;
    T t6 = t3 * p[0];
    T t7 = t2 * p[0];
    T t8 = 0.4e1;
    T t9 = -t8 * (t5 * p[6] + (p[8] - p[10]) * beta[1]) + 0.2e1 * beta[0] * p[2] - 0.2e1 * t6 + t4 * p[2] - t7;
    T t10 = 0.2e1 * beta[1] - 0.1e1;
    T t11 = beta[1] - t3;
    t3 = t3 * p[1];
    t2 = t2 * p[1];
    T t12 = -t8 * (t11 * p[9] + (p[7] - p[11]) * beta[0]) + 0.2e1 * beta[1] * p[5] - 0.2e1 * t3 + t10 * p[5] - t2;
    t6 = -t8 * (t11 * p[8] + (p[6] - p[10]) * beta[0]) + 0.2e1 * beta[1] * p[4] - 0.2e1 * t6 + t10 * p[4] - t7;
    t2 = -t8 * (t5 * p[7] + (p[9] - p[11]) * beta[1]) + 0.2e1 * beta[0] * p[3] - 0.2e1 * t3 + t4 * p[3] - t2;
    t3 = t9 * t12;
    t4 = -t6 * t2 + t3;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t8 - 0.3e1);
    t5 = t1 * (t12 - t2);
    t7 = t8 * beta[0];
    t10 = -0.1e1 + t7;
    t11 = t8 * beta[1];
    T t13 = -0.1e1 + t11;
    T t14 = t8 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t15 = t4 * (t12 * t14 + t7 * t2);
    T t16 = t8 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t17 = t4 * (-t11 * t12 - t16 * t2);
    T t18 = t4 * (t12 * beta[1] - t2 * beta[0]);
    T t19 = t8 * q[10];
    T t20 = t19 * t18 + t15 * q[6] + t17 * q[8] + t4 * (q[2] * t12 * t10 - q[4] * t2 * t13) + t5 * q[0];
    T t21 = -t6;
    t1 = t1 * (t9 + t21);
    t7 = t4 * (t14 * t21 - t7 * t9);
    t11 = t4 * (-t11 * t21 + t16 * t9);
    t14 = t4 * (t21 * beta[1] + t9 * beta[0]);
    t16 = t19 * t14 + t1 * q[0] + t11 * q[8] + t4 * (q[2] * t10 * t21 + q[4] * t9 * t13) + t7 * q[6];
    t19 = t4 * t10;
    T t22 = t19 * (t12 * t20 + t16 * t21);
    T t23 = t8 * q[11];
    T t24 = t23 * t18 + t15 * q[7] + t17 * q[9] + t4 * (q[3] * t12 * t10 - q[5] * t2 * t13) + t5 * q[1];
    t23 = t23 * t14 + t1 * q[1] + t11 * q[9] + t4 * (q[3] * t10 * t21 + q[5] * t9 * t13) + t7 * q[7];
    T t25 = pow(t16, 0.2e1);
    T t26 = pow(t20, 0.2e1);
    T t27 = pow(t23, 0.2e1);
    T t28 = pow(t24, 0.2e1);
    T t29 = t2 * t21;
    T t30 = -t6 * t2;
    T t31 = 0.1e1 / 0.2e1;
    T t32 = t31 * (-t4 * (t29 + t30) + t25 + t26 + t27 + t28) - t3 * t4;
    T t33 = t12 * t5;
    T t34 = t21 * t1;
    t28 = -t4 * (t30 + t3) + t26 + t28;
    t30 = t20 * t16;
    T t35 = t24 * t23;
    T t36 = t12 * t4;
    t36 = t19 * (t12 * t16 + t20 * t21);
    t27 = (-t4 * (t29 + t3) + t25 + t27) * t21;
    t6 = 0.2e1 * t30 + 0.2e1 * t35 - t9 * t4 * (t6 + t21);
    t29 = lambda * t22;
    t30 = pow(t4, 0.2e1);
    t35 = pow(t12, 0.2e1);
    T t37 = pow(t21, 0.2e1);
    T t38 = t30 * pow(t10, 0.2e1);
    t4 = t4 * t13;
    T t39 = -t2 * t12;
    T t40 = t9 * t21;
    t10 = t30 * t13 * t10;
    t3 = (t22 * t4 * (t16 * t9 - t2 * t20) + t32 * t10 * (t40 + t39)) * lambda + mu * (t31 * t10 * (-t2 * t21 + t3) * t6 + 0.2e1 * t10 * (t40 * t25 + t39 * t26) + t36 * t4 * (-t16 * t2 + t20 * t9) + t10 * (t27 * t9 + t39 * t28));
    t2 = mu * (t36 * t4 * (-t2 * t23 + t24 * t9) + 0.2e1 * t10 * (t40 * t23 * t16 + t39 * t24 * t20)) + t29 * t4 * (-t2 * t24 + t23 * t9);
    t4 = t15 * t12;
    t9 = t7 * t21;
    t10 = (t22 * (t15 * t20 + t16 * t7) + t32 * t19 * (t9 + t4)) * lambda + mu * (t31 * t19 * (t12 * t7 + t15 * t21) * t6 + t36 * (t15 * t16 + t20 * t7) + t19 * (t27 * t7 + t4 * t28) + 0.2e1 * t19 * (t9 * t25 + t4 * t26));
    t4 = mu * (t36 * (t15 * t23 + t24 * t7) + 0.2e1 * t19 * (t23 * t9 * t16 + t4 * t24 * t20)) + t29 * (t15 * t24 + t23 * t7);
    t7 = t17 * t12;
    t9 = t11 * t21;
    t13 = (t22 * (t11 * t16 + t17 * t20) + t32 * t19 * (t9 + t7)) * lambda + mu * (t31 * t19 * (t11 * t12 + t17 * t21) * t6 + t36 * (t11 * t20 + t16 * t17) + t19 * (t27 * t11 + t7 * t28) + 0.2e1 * t19 * (t9 * t25 + t7 * t26));
    t7 = mu * (t36 * (t11 * t24 + t17 * t23) + 0.2e1 * t19 * (t23 * t9 * t16 + t24 * t7 * t20)) + t29 * (t11 * t23 + t17 * t24);
    t9 = t18 * t12;
    t11 = t14 * t21;
    t15 = mu * (t8 * (t36 * (t14 * t20 + t16 * t18) + t19 * (t27 * t14 + t9 * t28)) + 0.8e1 * t19 * (t11 * t25 + t9 * t26) + 0.2e1 * t19 * (t12 * t14 + t18 * t21) * t6) + t8 * lambda * (t22 * (t14 * t16 + t18 * t20) + t32 * t19 * (t11 + t9));
    t8 = mu * (0.8e1 * t19 * (t11 * t23 * t16 + t24 * t9 * t20) + t8 * t36 * (t14 * t24 + t23 * t18)) + t29 * t8 * (t23 * t14 + t18 * t24);
    Vector<T,12> hessianc3;
    hessianc3[0] = (t22 * (t1 * t16 + t20 * t5) + t32 * t19 * (t34 + t33)) * lambda + mu * (t31 * t19 * (t1 * t12 + t21 * t5) * t6 + (t1 * t20 + t16 * t5) * t36 + t19 * (t27 * t1 + t33 * t28) + 0.2e1 * t19 * (t34 * t25 + t33 * t26));
    hessianc3[1] = mu * (t36 * (t1 * t24 + t23 * t5) + 0.2e1 * t19 * (t34 * t23 * t16 + t33 * t24 * t20)) + t29 * (t1 * t23 + t24 * t5);
    hessianc3[2] = (t32 * t38 * (t35 + t37) + pow(t22, 0.2e1)) * lambda + mu * (0.2e1 * t38 * (t25 * t37 + t26 * t35) + pow(t36, 0.2e1) + t38 * (t21 * (t12 * t6 + t27) + t28 * t35));
    hessianc3[3] = mu * (t36 * t19 * (t12 * t23 + t21 * t24) + 0.2e1 * t38 * (t23 * t37 * t16 + t24 * t35 * t20)) + t29 * t19 * (t12 * t24 + t21 * t23);
    hessianc3[4] = t3;
    hessianc3[5] = t2;
    hessianc3[6] = t10;
    hessianc3[7] = t4;
    hessianc3[8] = t13;
    hessianc3[9] = t7;
    hessianc3[10] = t15;
    hessianc3[11] = t8;
    hessian.col(2) = hessianc3;
}

void computeHessianc4(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = -beta[0] + t4;
    T t7 = t4 * p[0];
    T t8 = t3 * p[0];
    T t9 = 0.4e1;
    T t10 = t2 * (beta[0] * p[2] - t7) + t9 * (t6 * p[6] + (-p[8] + p[10]) * beta[1]) + t5 * p[2] - t8;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = -beta[1] + t4;
    t4 = t4 * p[1];
    t3 = t3 * p[1];
    T t13 = t2 * (beta[1] * p[5] - t4) + t9 * (t12 * p[9] + (-p[7] + p[11]) * beta[0]) + t11 * p[5] - t3;
    t7 = t2 * (beta[1] * p[4] - t7) + t9 * (t12 * p[8] + (-p[6] + p[10]) * beta[0]) + t11 * p[4] - t8;
    t3 = t2 * (beta[0] * p[3] - t4) + t9 * (t6 * p[7] + (-p[9] + p[11]) * beta[1]) + t5 * p[3] - t3;
    t4 = t10 * t13;
    t5 = -t3 * t7 + t4;
    t3 = -t3;
    t5 = 0.1e1 / t5;
    t1 = t5 * (t1 * t9 - 0.3e1);
    t6 = t1 * (t13 + t3);
    t8 = t9 * beta[0];
    t11 = -0.1e1 + t8;
    t12 = t9 * beta[1];
    T t14 = -0.1e1 + t12;
    T t15 = t9 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t16 = t5 * (t13 * t15 - t8 * t3);
    T t17 = t9 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t18 = t5 * (-t12 * t13 + t17 * t3);
    T t19 = t5 * (t13 * beta[1] + t3 * beta[0]);
    T t20 = t9 * q[11];
    T t21 = t20 * t19 + t16 * q[7] + t18 * q[9] + t5 * (q[3] * t13 * t11 + q[5] * t3 * t14) + t6 * q[1];
    t7 = -t7;
    t1 = t1 * (t10 + t7);
    t8 = t5 * (-t8 * t10 + t15 * t7);
    t12 = t5 * (t10 * t17 - t12 * t7);
    t15 = t5 * (t10 * beta[0] + t7 * beta[1]);
    t17 = t1 * q[1] + t12 * q[9] + t5 * (q[5] * t10 * t14 + q[3] * t11 * t7) + t8 * q[7] + t20 * t15;
    t20 = t17 * t7;
    T t22 = t21 * t13;
    T t23 = t5 * t11;
    T t24 = t23 * (t20 + t22);
    T t25 = t9 * q[10];
    T t26 = t16 * q[6] + t18 * q[8] + t5 * (q[2] * t13 * t11 + q[4] * t3 * t14) + t6 * q[0] + t25 * t19;
    t25 = t1 * q[0] + t12 * q[8] + t5 * (q[4] * t10 * t14 + q[2] * t11 * t7) + t8 * q[6] + t25 * t15;
    T t27 = t25 * t1;
    T t28 = t26 * t6;
    T t29 = t23 * (t13 * t17 + t21 * t7);
    T t30 = lambda * t24;
    T t31 = pow(t17, 0.2e1);
    T t32 = pow(t26, 0.2e1);
    T t33 = pow(t25, 0.2e1);
    T t34 = pow(t21, 0.2e1);
    T t35 = 0.1e1 / 0.2e1;
    t35 = t35 * (t34 + t31 + t32 + t33) - 0.1e1;
    T t36 = t7 * t1;
    T t37 = t13 * t6;
    t32 = 0.1e1 - t34 - t32;
    T t38 = t17 * t21 + t25 * t26;
    t33 = 0.1e1 - t31 - t33;
    T t39 = pow(t7, 0.2e1);
    T t40 = pow(t13, 0.2e1);
    T t41 = pow(t5, 0.2e1);
    T t42 = t41 * pow(t11, 0.2e1);
    T t43 = t7 * t31;
    T t44 = t26 * t3;
    T t45 = t25 * t10;
    t5 = t5 * t14;
    t11 = t41 * t14 * t11;
    t14 = mu * (t2 * t11 * (t45 * t20 + t44 * t22) + t29 * t5 * (t10 * t26 + t25 * t3)) + t30 * t5 * (t44 + t45);
    t41 = t3 * t13;
    t44 = t10 * t7;
    t3 = (t24 * t5 * (t10 * t17 + t21 * t3) + t35 * t11 * (t41 + t44)) * lambda + mu * (t2 * t11 * (t44 * t31 + t41 * t34) + t29 * t5 * (t10 * t21 + t17 * t3) + t38 * t11 * (t3 * t7 + t4) - t11 * (t41 * t32 + t44 * t33));
    t4 = t25 * t8;
    t5 = t26 * t16;
    t4 = mu * (t2 * t23 * (t4 * t20 + t5 * t22) + t29 * (t16 * t25 + t26 * t8)) + t30 * (t4 + t5);
    t5 = t16 * t13;
    t10 = t8 * t7;
    t5 = (t24 * (t16 * t21 + t17 * t8) + t35 * t23 * (t10 + t5)) * lambda + mu * (t2 * t23 * (t5 * t34 + t43 * t8) + t29 * (t16 * t17 + t21 * t8) + t38 * t23 * (t13 * t8 + t16 * t7) - t23 * (t10 * t33 + t5 * t32));
    t8 = t25 * t12;
    t10 = t26 * t18;
    t8 = mu * (t2 * t23 * (t10 * t22 + t8 * t20) + t29 * (t12 * t26 + t18 * t25)) + t30 * (t8 + t10);
    t10 = t18 * t13;
    t11 = t12 * t7;
    t10 = (t24 * (t12 * t17 + t18 * t21) + t35 * t23 * (t10 + t11)) * lambda + mu * (t2 * t23 * (t10 * t34 + t43 * t12) + t29 * (t12 * t21 + t17 * t18) + t38 * t23 * (t12 * t13 + t18 * t7) - t23 * (t10 * t32 + t11 * t33));
    t11 = t25 * t15;
    t12 = t26 * t19;
    t11 = mu * (0.8e1 * t23 * (t11 * t20 + t12 * t22) + t9 * t29 * (t15 * t26 + t25 * t19)) + t30 * t9 * (t12 + t11);
    t12 = t19 * t13;
    t16 = t15 * t7;
    t9 = mu * (-t9 * (-t29 * (t15 * t21 + t17 * t19) - t38 * t23 * (t13 * t15 + t19 * t7) + t23 * (t12 * t32 + t16 * t33)) + 0.8e1 * t23 * (t12 * t34 + t43 * t15)) + t9 * lambda * (t24 * (t15 * t17 + t19 * t21) + t35 * t23 * (t12 + t16));
    Vector<T, 12> hessianc4;
    hessianc4[0] = mu * (t2 * t23 * (t27 * t20 + t28 * t22) + (t1 * t26 + t25 * t6) * t29) + t30 * (t27 + t28);
    hessianc4[1] = (t24 * (t1 * t17 + t21 * t6) + t35 * t23 * (t36 + t37)) * lambda + mu * (t2 * t23 * (t36 * t31 + t37 * t34) + t29 * (t1 * t21 + t17 * t6) + t38 * t23 * (t1 * t13 + t6 * t7) - t23 * (t37 * t32 + t36 * t33));
    hessianc4[2] = mu * (t2 * t42 * (t17 * t39 * t25 + t21 * t40 * t26) + t29 * t23 * (t13 * t25 + t26 * t7)) + t30 * t23 * (t13 * t26 + t25 * t7);
    hessianc4[3] = (t35 * t42 * (t39 + t40) + pow(t24, 0.2e1)) * lambda + mu * (t2 * t42 * (t34 * t40 + t7 * (t13 * t38 + t43)) + pow(t29, 0.2e1) - t42 * (t32 * t40 + t33 * t39));
    hessianc4[4] = t14;
    hessianc4[5] = t3;
    hessianc4[6] = t4;
    hessianc4[7] = t5;
    hessianc4[8] = t8;
    hessianc4[9] = t10;
    hessianc4[10] = t11;
    hessianc4[11] = t9;
    hessian.col(3) = hessianc4;
}

void computeHessianc5(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = -beta[0] + t4;
    T t7 = t4 * p[0];
    T t8 = t3 * p[0];
    T t9 = 0.4e1;
    T t10 = t2 * (beta[0] * p[2] - t7) + t9 * (t6 * p[6] + (-p[8] + p[10]) * beta[1]) + t5 * p[2] - t8;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = -beta[1] + t4;
    t4 = t4 * p[1];
    t3 = t3 * p[1];
    T t13 = t2 * (beta[1] * p[5] - t4) + t9 * (t12 * p[9] + (-p[7] + p[11]) * beta[0]) + t11 * p[5] - t3;
    t7 = t2 * (beta[1] * p[4] - t7) + t9 * (t12 * p[8] + (-p[6] + p[10]) * beta[0]) + t11 * p[4] - t8;
    t3 = t2 * (beta[0] * p[3] - t4) + t9 * (t6 * p[7] + (-p[9] + p[11]) * beta[1]) + t5 * p[3] - t3;
    t4 = t10 * t13;
    t5 = t3 * t7 - t4;
    t3 = -t3;
    t5 = 0.1e1 / t5;
    t1 = t5 * (t1 * t9 - 0.3e1);
    t6 = t1 * (t13 + t3);
    t8 = t9 * beta[0];
    t11 = -0.1e1 + t8;
    t12 = t9 * beta[1];
    T t14 = -0.1e1 + t12;
    T t15 = t9 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t16 = t5 * (-t13 * t15 + t8 * t3);
    T t17 = t9 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t18 = t5 * (t12 * t13 - t17 * t3);
    T t19 = t5 * (t13 * beta[1] + t3 * beta[0]);
    T t20 = t9 * q[10];
    T t21 = t16 * q[6] + t18 * q[8] - t5 * (q[2] * t13 * t11 + q[4] * t3 * t14) - t6 * q[0] - t20 * t19;
    t7 = -t7;
    t1 = t1 * (t10 + t7);
    t8 = t5 * (t8 * t10 - t15 * t7);
    t12 = t5 * (-t10 * t17 + t12 * t7);
    t15 = t5 * (t10 * beta[0] + t7 * beta[1]);
    t17 = -t20 * t15 - t1 * q[0] + t12 * q[8] - t5 * (q[4] * t10 * t14 + q[2] * t11 * t7) + t8 * q[6];
    t20 = t5 * t14;
    T t22 = t20 * (t10 * t17 + t21 * t3);
    T t23 = t9 * q[11];
    T t24 = t16 * q[7] + t18 * q[9] - t5 * (q[3] * t13 * t11 + q[5] * t3 * t14) - t6 * q[1] - t23 * t19;
    t23 = -t1 * q[1] + t12 * q[9] - t5 * (q[5] * t10 * t14 + q[3] * t11 * t7) + t8 * q[7] - t23 * t15;
    T t25 = pow(t24, 0.2e1);
    T t26 = pow(t17, 0.2e1);
    T t27 = pow(t21, 0.2e1);
    T t28 = pow(t23, 0.2e1);
    T t29 = 0.1e1 / 0.2e1;
    t29 = t29 * (t28 + t25 + t26 + t27) - 0.1e1;
    T t30 = t3 * t6;
    T t31 = t10 * t1;
    t25 = 0.1e1 - t25 - t27;
    T t32 = t20 * (t10 * t21 + t17 * t3);
    T t33 = t17 * t21 + t23 * t24;
    t28 = 0.1e1 - t28 - t26;
    T t34 = lambda * t22;
    T t35 = t5 * t11;
    t5 = pow(t5, 0.2e1);
    T t36 = t10 * t7;
    T t37 = t3 * t13;
    t11 = t5 * t14 * t11;
    T t38 = mu * (t2 * t11 * (t36 * t23 * t17 + t37 * t24 * t21) + t32 * t35 * (t13 * t23 + t24 * t7)) + t34 * t35 * (t13 * t24 + t23 * t7);
    T t39 = pow(t10, 0.2e1);
    T t40 = pow(t3, 0.2e1);
    t5 = t5 * pow(t14, 0.2e1);
    t14 = t3 * t27;
    T t41 = (t29 * t5 * (t40 + t39) + pow(t22, 0.2e1)) * lambda + mu * (t2 * t5 * (t26 * t39 + t3 * (t10 * t33 + t14)) + pow(t32, 0.2e1) - t5 * (t25 * t40 + t28 * t39));
    t5 = mu * (t2 * t5 * (t23 * t39 * t17 + t24 * t40 * t21) + t32 * t20 * (t10 * t24 + t23 * t3)) + t34 * t20 * (t10 * t23 + t24 * t3);
    t39 = t8 * t10;
    t40 = t16 * t3;
    T t42 = (t22 * (t16 * t21 + t17 * t8) + t29 * t20 * (t40 + t39)) * lambda - mu * (-t2 * t20 * (t14 * t16 + t26 * t39) - t32 * (t16 * t17 + t21 * t8) - t33 * t20 * (t10 * t16 + t8 * t3) + t20 * (t25 * t40 + t28 * t39));
    t8 = -mu * (-t2 * t20 * (t23 * t39 * t17 + t24 * t40 * t21) - t32 * (t16 * t23 + t24 * t8)) + t34 * (t16 * t24 + t23 * t8);
    t16 = t12 * t10;
    t39 = t18 * t3;
    t40 = (t22 * (t12 * t17 + t18 * t21) + t29 * t20 * (t16 + t39)) * lambda - mu * (-t2 * t20 * (t14 * t18 + t16 * t26) - t32 * (t12 * t21 + t17 * t18) - t33 * t20 * (t10 * t18 + t12 * t3) + t20 * (t16 * t28 + t39 * t25));
    t12 = -mu * (-t2 * t20 * (t16 * t23 * t17 + t39 * t24 * t21) - t32 * (t12 * t24 + t18 * t23)) + t34 * (t12 * t23 + t18 * t24);
    t16 = t15 * t10;
    t18 = t19 * t3;
    t14 = mu * (-t9 * (-t32 * (t15 * t21 + t17 * t19) - t33 * t20 * (t10 * t19 + t15 * t3) + t20 * (t16 * t28 + t18 * t25)) + 0.8e1 * t20 * (t14 * t19 + t16 * t26)) + t9 * lambda * (t22 * (t15 * t17 + t19 * t21) + t29 * t20 * (t16 + t18));
    t9 = mu * (0.8e1 * t20 * (t16 * t23 * t17 + t18 * t24 * t21) + t9 * t32 * (t15 * t24 + t23 * t19)) + t34 * t9 * (t23 * t15 + t19 * t24);
    Vector<T, 12> hessianc5;
    hessianc5[0] = (t22 * (t1 * t17 + t21 * t6) + t29 * t20 * (t30 + t31)) * lambda + mu * (t2 * t20 * (t31 * t26 + t30 * t27) + (t1 * t21 + t17 * t6) * t32 + t33 * t20 * (t1 * t3 + t10 * t6) - t20 * (t30 * t25 + t31 * t28));
    hessianc5[1] = mu * (t2 * t20 * (t31 * t23 * t17 + t30 * t24 * t21) + t32 * (t1 * t24 + t23 * t6)) + t34 * (t1 * t23 + t24 * t6);
    hessianc5[2] = (t22 * t35 * (t13 * t21 + t17 * t7) + t29 * t11 * (t36 + t37)) * lambda + mu * (t2 * t11 * (t36 * t26 + t37 * t27) + t32 * t35 * (t13 * t17 + t21 * t7) + t33 * t11 * (t3 * t7 + t4) - t11 * (t37 * t25 + t36 * t28));
    hessianc5[3] = t38;
    hessianc5[4] = t41;
    hessianc5[5] = t5;
    hessianc5[6] = -t42;
    hessianc5[7] = -t8;
    hessianc5[8] = -t40;
    hessianc5[9] = -t12;
    hessianc5[10] = t14;
    hessianc5[11] = t9;
    hessian.col(4) = hessianc5;
}

void computeHessianc6(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = -beta[0] + t4;
    T t7 = t4 * p[0];
    T t8 = t3 * p[0];
    T t9 = 0.4e1;
    T t10 = t2 * (beta[0] * p[2] - t7) + t9 * (t6 * p[6] + (-p[8] + p[10]) * beta[1]) + t5 * p[2] - t8;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = -beta[1] + t4;
    t4 = t4 * p[1];
    t3 = t3 * p[1];
    T t13 = t2 * (beta[1] * p[5] - t4) + t9 * (t12 * p[9] + (-p[7] + p[11]) * beta[0]) + t11 * p[5] - t3;
    t7 = t2 * (beta[1] * p[4] - t7) + t9 * (t12 * p[8] + (-p[6] + p[10]) * beta[0]) + t11 * p[4] - t8;
    t3 = t2 * (beta[0] * p[3] - t4) + t9 * (t6 * p[7] + (-p[9] + p[11]) * beta[1]) + t5 * p[3] - t3;
    t4 = t10 * t13;
    t5 = -t3 * t7 + t4;
    t3 = -t3;
    t5 = 0.1e1 / t5;
    t1 = t5 * (t1 * t9 - 0.3e1);
    t6 = t1 * (t13 + t3);
    t8 = t9 * beta[0];
    t11 = -0.1e1 + t8;
    t12 = t9 * beta[1];
    T t14 = -0.1e1 + t12;
    T t15 = t9 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t16 = t5 * (t13 * t15 - t8 * t3);
    T t17 = t9 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t18 = t5 * (-t12 * t13 + t17 * t3);
    T t19 = t5 * (t13 * beta[1] + t3 * beta[0]);
    T t20 = t9 * q[11];
    T t21 = t20 * t19 + t16 * q[7] + t18 * q[9] + t5 * (q[3] * t13 * t11 + q[5] * t3 * t14) + t6 * q[1];
    t7 = -t7;
    t1 = t1 * (t10 + t7);
    t8 = t5 * (-t8 * t10 + t15 * t7);
    t12 = t5 * (t10 * t17 - t12 * t7);
    t15 = t5 * (t10 * beta[0] + t7 * beta[1]);
    t17 = t20 * t15 + t1 * q[1] + t12 * q[9] + t5 * (q[5] * t10 * t14 + q[3] * t11 * t7) + t8 * q[7];
    t20 = t21 * t3;
    T t22 = t10 * t17;
    T t23 = t5 * t14;
    T t24 = t23 * (t22 + t20);
    T t25 = t9 * q[10];
    T t26 = t16 * q[6] + t18 * q[8] + t5 * (q[2] * t13 * t11 + q[4] * t3 * t14) + t6 * q[0] + t25 * t19;
    t25 = t1 * q[0] + t12 * q[8] + t5 * (q[4] * t10 * t14 + q[2] * t11 * t7) + t8 * q[6] + t25 * t15;
    T t27 = t26 * t6;
    T t28 = t25 * t1;
    T t29 = t23 * (t10 * t21 + t17 * t3);
    T t30 = lambda * t24;
    T t31 = pow(t17, 0.2e1);
    T t32 = pow(t21, 0.2e1);
    T t33 = pow(t26, 0.2e1);
    T t34 = pow(t25, 0.2e1);
    T t35 = 0.1e1 / 0.2e1;
    t35 = t35 * (t33 + t34 + t32 + t31) - 0.1e1;
    T t36 = t10 * t1;
    T t37 = t3 * t6;
    t33 = 0.1e1 - t33 - t32;
    T t38 = t17 * t21 + t25 * t26;
    t34 = 0.1e1 - t34 - t31;
    t32 = t3 * t32;
    T t39 = t26 * t13;
    T t40 = t25 * t7;
    T t41 = t5 * t11;
    t5 = pow(t5, 0.2e1);
    t11 = t5 * t14 * t11;
    T t42 = t10 * t7;
    T t43 = t3 * t13;
    t4 = (t24 * t41 * (t13 * t21 + t17 * t7) + t35 * t11 * (t42 + t43)) * lambda + mu * (t2 * t11 * (t32 * t13 + t42 * t31) + t29 * t41 * (t13 * t17 + t21 * t7) + t38 * t11 * (t3 * t7 + t4) - t11 * (t43 * t33 + t42 * t34));
    t42 = pow(t3, 0.2e1);
    t43 = pow(t10, 0.2e1);
    t5 = t5 * pow(t14, 0.2e1);
    t14 = (t35 * t5 * (t42 + t43) + pow(t24, 0.2e1)) * lambda + mu * (t2 * t5 * (t3 * (t10 * t38 + t32) + t31 * t43) + pow(t29, 0.2e1) - t5 * (t33 * t42 + t34 * t43));
    T t44 = t26 * t16;
    T t45 = t25 * t8;
    T t46 = t16 * t3;
    T t47 = t8 * t10;
    t46 = (t24 * (t16 * t21 + t17 * t8) + t35 * t23 * (t47 + t46)) * lambda + mu * (t2 * t23 * (t32 * t16 + t47 * t31) + t29 * (t16 * t17 + t21 * t8) + t38 * t23 * (t10 * t16 + t8 * t3) - t23 * (t46 * t33 + t47 * t34));
    t47 = t26 * t18;
    T t48 = t25 * t12;
    t47 = mu * (t2 * t23 * (t47 * t20 + t48 * t22) + t29 * (t12 * t26 + t18 * t25)) + t30 * (t48 + t47);
    t48 = t18 * t3;
    T t49 = t12 * t10;
    t12 = (t24 * (t12 * t17 + t18 * t21) + t35 * t23 * (t49 + t48)) * lambda + mu * (t2 * t23 * (t32 * t18 + t49 * t31) + t29 * (t12 * t21 + t17 * t18) + t38 * t23 * (t10 * t18 + t12 * t3) - t23 * (t48 * t33 + t49 * t34));
    t18 = t26 * t19;
    t48 = t25 * t15;
    t18 = mu * (0.8e1 * t23 * (t18 * t20 + t48 * t22) + t9 * t29 * (t15 * t26 + t25 * t19)) + t30 * t9 * (t48 + t18);
    t48 = t19 * t3;
    t49 = t15 * t10;
    t9 = mu * (t9 * (t29 * (t15 * t21 + t17 * t19) + t38 * t23 * (t10 * t19 + t15 * t3) - t23 * (t48 * t33 + t49 * t34)) + 0.8e1 * t23 * (t32 * t19 + t49 * t31)) + t9 * lambda * (t24 * (t15 * t17 + t19 * t21) + t35 * t23 * (t49 + t48));
    Vector<T, 12> hessianc6;
    hessianc6[0] = mu * (t2 * t23 * (t27 * t20 + t28 * t22) + (t1 * t26 + t25 * t6) * t29) + t30 * (t28 + t27);
    hessianc6[1] = (t24 * (t1 * t17 + t21 * t6) + t35 * t23 * (t37 + t36)) * lambda + mu * (t2 * t23 * (t36 * t31 + t32 * t6) + t29 * (t1 * t21 + t17 * t6) + t38 * t23 * (t1 * t3 + t10 * t6) - t23 * (t37 * t33 + t36 * t34));
    hessianc6[2] = mu * (t2 * t11 * (t39 * t20 + t40 * t22) + t29 * t41 * (t13 * t25 + t26 * t7)) + t30 * t41 * (t39 + t40);
    hessianc6[3] = t4;
    hessianc6[4] = mu * (t2 * t5 * (t17 * t43 * t25 + t21 * t42 * t26) + t29 * t23 * (t10 * t26 + t25 * t3)) + t30 * t23 * (t10 * t25 + t26 * t3);
    hessianc6[5] = t14;
    hessianc6[6] = mu * (t2 * t23 * (t44 * t20 + t45 * t22) + t29 * (t16 * t25 + t26 * t8)) + t30 * (t45 + t44);
    hessianc6[7] = t46;
    hessianc6[8] = t47;
    hessianc6[9] = t12;
    hessianc6[10] = t18;
    hessianc6[11] = t9;
    hessian.col(5) = hessianc6;
}

void computeHessianc7(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = -beta[0] + t4;
    T t7 = t4 * p[0];
    T t8 = t3 * p[0];
    T t9 = 0.4e1;
    T t10 = t2 * (beta[0] * p[2] - t7) + t9 * (t6 * p[6] + (-p[8] + p[10]) * beta[1]) + t5 * p[2] - t8;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = -beta[1] + t4;
    t4 = t4 * p[1];
    t3 = t3 * p[1];
    T t13 = t2 * (beta[1] * p[5] - t4) + t9 * (t12 * p[9] + (-p[7] + p[11]) * beta[0]) + t11 * p[5] - t3;
    t7 = t2 * (beta[1] * p[4] - t7) + t9 * (t12 * p[8] + (-p[6] + p[10]) * beta[0]) + t11 * p[4] - t8;
    t3 = t2 * (beta[0] * p[3] - t4) + t9 * (t6 * p[7] + (-p[9] + p[11]) * beta[1]) + t5 * p[3] - t3;
    t4 = t10 * t13 - t3 * t7;
    t3 = -t3;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t9 - 0.3e1);
    t5 = t1 * (t13 + t3);
    t6 = t9 * beta[0];
    t8 = -0.1e1 + t6;
    t11 = t9 * beta[1];
    t12 = -0.1e1 + t11;
    T t14 = t9 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t15 = t4 * (t13 * t14 - t6 * t3);
    T t16 = t9 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t17 = t4 * (-t11 * t13 + t16 * t3);
    T t18 = t4 * (t13 * beta[1] + t3 * beta[0]);
    T t19 = t9 * q[10];
    T t20 = t19 * t18 + t15 * q[6] + t17 * q[8] + t4 * (q[4] * t3 * t12 + q[2] * t13 * t8) + t5 * q[0];
    t7 = -t7;
    t1 = t1 * (t10 + t7);
    t6 = t4 * (-t6 * t10 + t14 * t7);
    t11 = t4 * (t10 * t16 - t11 * t7);
    t14 = t4 * (t10 * beta[0] + t7 * beta[1]);
    t16 = t19 * t14 + t1 * q[0] + t11 * q[8] + t4 * (q[4] * t10 * t12 + q[2] * t8 * t7) + t6 * q[6];
    t19 = t15 * t20 + t16 * t6;
    T t21 = t9 * q[11];
    T t22 = t21 * t18 + t15 * q[7] + t17 * q[9] + t4 * (q[5] * t3 * t12 + q[3] * t13 * t8) + t5 * q[1];
    t21 = t21 * t14 + t1 * q[1] + t11 * q[9] + t4 * (q[5] * t10 * t12 + q[3] * t8 * t7) + t6 * q[7];
    T t23 = pow(t22, 0.2e1);
    T t24 = pow(t16, 0.2e1);
    T t25 = pow(t21, 0.2e1);
    T t26 = pow(t20, 0.2e1);
    T t27 = 0.1e1 / 0.2e1;
    t27 = t27 * (t25 + t26 + t23 + t24) - 0.1e1;
    T t28 = t6 * t1;
    T t29 = t15 * t5;
    t23 = 0.1e1 - t26 - t23;
    T t30 = t15 * t16 + t20 * t6;
    T t31 = t16 * t20 + t21 * t22;
    t25 = 0.1e1 - t25 - t24;
    T t32 = lambda * t19;
    t8 = t4 * t8;
    T t33 = t6 * t7;
    T t34 = t15 * t13;
    T t35 = mu * (t2 * t8 * (t33 * t21 * t16 + t34 * t22 * t20) + t30 * t8 * (t13 * t21 + t22 * t7)) + t32 * t8 * (t13 * t22 + t21 * t7);
    t4 = t4 * t12;
    t12 = t15 * t3;
    T t36 = t6 * t10;
    T t37 = (t19 * t4 * (t10 * t16 + t20 * t3) + t27 * t4 * (t12 + t36)) * lambda + mu * (t2 * t4 * (t12 * t26 + t36 * t24) + t30 * t4 * (t10 * t20 + t16 * t3) + t31 * t4 * (t10 * t15 + t6 * t3) - t4 * (t12 * t23 + t36 * t25));
    t3 = mu * (t2 * t4 * (t12 * t22 * t20 + t36 * t21 * t16) + t30 * t4 * (t10 * t22 + t21 * t3)) + t32 * t4 * (t10 * t21 + t22 * t3);
    t4 = pow(t15, 0.2e1);
    t10 = pow(t6, 0.2e1);
    t12 = t6 * t24;
    t36 = (t27 * (t4 + t10) + pow(t19, 0.2e1)) * lambda + mu * (-t10 * t25 + t2 * (t26 * t4 + t6 * (t15 * t31 + t12)) - t23 * t4 + pow(t30, 0.2e1));
    T t38 = t17 * t15;
    T t39 = t11 * t6;
    T t40 = (t19 * (t11 * t16 + t17 * t20) + t27 * (t38 + t39)) * lambda + mu * (t2 * (t12 * t11 + t38 * t26) + t30 * (t11 * t20 + t16 * t17) + t31 * (t11 * t15 + t17 * t6) - t39 * t25 - t38 * t23);
    t11 = mu * (t2 * (t39 * t21 * t16 + t38 * t22 * t20) + t30 * (t11 * t22 + t17 * t21)) + t32 * (t11 * t21 + t17 * t22);
    t17 = t18 * t15;
    t38 = t14 * t6;
    t12 = mu * (0.8e1 * t12 * t14 + 0.8e1 * t17 * t26 - t9 * (-t30 * (t14 * t20 + t16 * t18) - t31 * (t14 * t15 + t18 * t6) + t17 * t23 + t38 * t25)) + t9 * lambda * (t19 * (t14 * t16 + t18 * t20) + t27 * (t38 + t17));
    t9 = mu * (0.8e1 * t38 * t21 * t16 + 0.8e1 * t17 * t22 * t20 + t9 * t30 * (t14 * t22 + t21 * t18)) + t32 * t9 * (t21 * t14 + t18 * t22);
    Vector<T, 12> hessianc7;
    hessianc7[0] = (t19 * (t1 * t16 + t20 * t5) + t27 * (t29 + t28)) * lambda + mu * (t2 * (t28 * t24 + t29 * t26) + (t1 * t20 + t16 * t5) * t30 + t31 * (t1 * t15 + t5 * t6) - t28 * t25 - t29 * t23);
    hessianc7[1] = mu * (t2 * (t28 * t21 * t16 + t29 * t22 * t20) + t30 * (t1 * t22 + t21 * t5)) + t32 * (t1 * t21 + t22 * t5);
    hessianc7[2] = (t19 * t8 * (t13 * t20 + t16 * t7) + t27 * t8 * (t34 + t33)) * lambda + mu * (t2 * t8 * (t33 * t24 + t34 * t26) + t30 * t8 * (t13 * t16 + t20 * t7) + t31 * t8 * (t13 * t6 + t15 * t7) - t8 * (t34 * t23 + t33 * t25));
    hessianc7[3] = t35;
    hessianc7[4] = t37;
    hessianc7[5] = t3;
    hessianc7[6] = t36;
    hessianc7[7] = mu * (t2 * (t10 * t21 * t16 + t22 * t4 * t20) + t30 * (t15 * t21 + t22 * t6)) + t32 * (t15 * t22 + t21 * t6);
    hessianc7[8] = t40;
    hessianc7[9] = t11;
    hessianc7[10] = t12;
    hessianc7[11] = t9;
    hessian.col(6) = hessianc7;
}

void computeHessianc8(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = -beta[0] + t4;
    T t7 = t4 * p[0];
    T t8 = t3 * p[0];
    T t9 = 0.4e1;
    T t10 = t2 * (beta[0] * p[2] - t7) + t9 * (t6 * p[6] + (-p[8] + p[10]) * beta[1]) + t5 * p[2] - t8;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = -beta[1] + t4;
    t4 = t4 * p[1];
    t3 = t3 * p[1];
    T t13 = t2 * (beta[1] * p[5] - t4) + t9 * (t12 * p[9] + (-p[7] + p[11]) * beta[0]) + t11 * p[5] - t3;
    t7 = t2 * (beta[1] * p[4] - t7) + t9 * (t12 * p[8] + (-p[6] + p[10]) * beta[0]) + t11 * p[4] - t8;
    t3 = t2 * (beta[0] * p[3] - t4) + t9 * (t6 * p[7] + (-p[9] + p[11]) * beta[1]) + t5 * p[3] - t3;
    t4 = t10 * t13 - t3 * t7;
    t3 = -t3;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t9 - 0.3e1);
    t5 = t1 * (t13 + t3);
    t6 = t9 * beta[0];
    t8 = -0.1e1 + t6;
    t11 = t9 * beta[1];
    t12 = -0.1e1 + t11;
    T t14 = t9 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t15 = t4 * (t13 * t14 - t6 * t3);
    T t16 = t9 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t17 = t4 * (-t11 * t13 + t16 * t3);
    T t18 = t4 * (t13 * beta[1] + t3 * beta[0]);
    T t19 = t9 * q[11];
    T t20 = t19 * t18 + t15 * q[7] + t17 * q[9] + t4 * (q[5] * t3 * t12 + q[3] * t13 * t8) + t5 * q[1];
    t7 = -t7;
    t1 = t1 * (t10 + t7);
    t6 = t4 * (-t6 * t10 + t14 * t7);
    t11 = t4 * (t10 * t16 - t11 * t7);
    t14 = t4 * (t10 * beta[0] + t7 * beta[1]);
    t16 = t19 * t14 + t1 * q[1] + t11 * q[9] + t4 * (q[5] * t10 * t12 + q[3] * t8 * t7) + t6 * q[7];
    t19 = t16 * t6;
    T t21 = t20 * t15;
    T t22 = t21 + t19;
    T t23 = t9 * q[10];
    T t24 = t23 * t18 + t15 * q[6] + t17 * q[8] + t4 * (q[4] * t3 * t12 + q[2] * t13 * t8) + t5 * q[0];
    t23 = t1 * q[0] + t11 * q[8] + t4 * (q[4] * t10 * t12 + q[2] * t8 * t7) + t6 * q[6] + t23 * t14;
    T t25 = t23 * t1;
    T t26 = t24 * t5;
    T t27 = t15 * t16 + t20 * t6;
    T t28 = lambda * t22;
    T t29 = pow(t24, 0.2e1);
    T t30 = pow(t20, 0.2e1);
    T t31 = pow(t16, 0.2e1);
    T t32 = pow(t23, 0.2e1);
    T t33 = 0.1e1 / 0.2e1;
    t33 = t33 * (t31 + t32 + t29 + t30) - 0.1e1;
    T t34 = t15 * t5;
    T t35 = t6 * t1;
    t29 = 0.1e1 - t29 - t30;
    T t36 = t16 * t20 + t23 * t24;
    t32 = 0.1e1 - t31 - t32;
    t31 = t6 * t31;
    T t37 = t23 * t7;
    T t38 = t24 * t13;
    t8 = t4 * t8;
    T t39 = t6 * t7;
    T t40 = t15 * t13;
    T t41 = t24 * t3;
    T t42 = t23 * t10;
    t4 = t4 * t12;
    t12 = mu * (t2 * t4 * (t42 * t19 + t41 * t21) + t27 * t4 * (t10 * t24 + t23 * t3)) + t28 * t4 * (t42 + t41);
    t41 = t15 * t3;
    t42 = t6 * t10;
    t3 = (t22 * t4 * (t10 * t16 + t20 * t3) + t33 * t4 * (t42 + t41)) * lambda + mu * (t2 * t4 * (t31 * t10 + t41 * t30) + t27 * t4 * (t10 * t20 + t16 * t3) + t36 * t4 * (t10 * t15 + t6 * t3) - t4 * (t41 * t29 + t42 * t32));
    t4 = pow(t15, 0.2e1);
    t10 = pow(t6, 0.2e1);
    t41 = mu * (t2 * (t10 * t16 * t23 + t20 * t4 * t24) + t27 * (t15 * t23 + t24 * t6)) + t28 * (t15 * t24 + t23 * t6);
    t4 = (t33 * (t10 + t4) + pow(t22, 0.2e1)) * lambda + mu * (t2 * (t30 * t4 + t6 * (t15 * t36 + t31)) - t10 * t32 + pow(t27, 0.2e1) - t29 * t4);
    t10 = t23 * t11;
    t42 = t24 * t17;
    t10 = mu * (t2 * (t10 * t19 + t42 * t21) + t27 * (t11 * t24 + t17 * t23)) + t28 * (t10 + t42);
    t42 = t17 * t15;
    T t43 = t11 * t6;
    t11 = (t22 * (t11 * t16 + t17 * t20) + t33 * (t43 + t42)) * lambda + mu * (t2 * (t31 * t11 + t42 * t30) + t27 * (t11 * t20 + t16 * t17) + t36 * (t11 * t15 + t17 * t6) - t43 * t32 - t42 * t29);
    t17 = t23 * t14;
    t42 = t24 * t18;
    t17 = mu * (0.8e1 * t17 * t19 + 0.8e1 * t42 * t21 + t9 * t27 * (t14 * t24 + t23 * t18)) + t28 * t9 * (t17 + t42);
    t42 = t18 * t15;
    t43 = t14 * t6;
    t9 = mu * (t9 * (t27 * (t14 * t20 + t16 * t18) + t36 * (t14 * t15 + t18 * t6) - t42 * t29 - t43 * t32) + 0.8e1 * t31 * t14 + 0.8e1 * t42 * t30) + t9 * lambda * (t22 * (t14 * t16 + t18 * t20) + t33 * (t43 + t42));
    Vector<T,12> hessianc8;
    hessianc8[0] = mu * (t2 * (t25 * t19 + t26 * t21) + (t1 * t24 + t23 * t5) * t27) + t28 * (t26 + t25);
    hessianc8[1] = (t22 * (t1 * t16 + t20 * t5) + t33 * (t35 + t34)) * lambda + mu * (t2 * (t31 * t1 + t34 * t30) + t27 * (t1 * t20 + t16 * t5) + t36 * (t1 * t15 + t5 * t6) - t35 * t32 - t34 * t29);
    hessianc8[2] = mu * (t2 * t8 * (t37 * t19 + t38 * t21) + t27 * t8 * (t13 * t23 + t24 * t7)) + t28 * t8 * (t38 + t37);
    hessianc8[3] = (t22 * t8 * (t13 * t20 + t16 * t7) + t33 * t8 * (t39 + t40)) * lambda + mu * (t2 * t8 * (t40 * t30 + t31 * t7) + t27 * t8 * (t13 * t16 + t20 * t7) + t36 * t8 * (t13 * t6 + t15 * t7) - t8 * (t40 * t29 + t39 * t32));
    hessianc8[4] = t12;
    hessianc8[5] = t3;
    hessianc8[6] = t41;
    hessianc8[7] = t4;
    hessianc8[8] = t10;
    hessianc8[9] = t11;
    hessianc8[10] = t17;
    hessianc8[11] = t9;
    hessian.col(7) = hessianc8;
}

void computeHessianc9(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = -0.2e1 * t1 + 0.1e1;
    T t3 = 0.1e1 - beta[0] - beta[1];
    T t4 = 0.2e1 * beta[0] - 0.1e1;
    T t5 = t2 * p[0];
    T t6 = t3 * p[0];
    T t7 = -beta[0] + t3;
    T t8 = 0.4e1;
    T t9 = t4 * p[2] + 0.2e1 * beta[0] * p[2] + t8 * (t7 * p[6] + (-p[8] + p[10]) * beta[1]) - t5 - 0.2e1 * t6;
    T t10 = 0.2e1 * beta[1] - 0.1e1;
    t2 = t2 * p[1];
    T t11 = t3 * p[1];
    t3 = -beta[1] + t3;
    T t12 = t10 * p[5] + t8 * (t3 * p[9] + (-p[7] + p[11]) * beta[0]) + 0.2e1 * beta[1] * p[5] - 0.2e1 * t11 - t2;
    t3 = t10 * p[4] + t8 * (t3 * p[8] + (-p[6] + p[10]) * beta[0]) + 0.2e1 * beta[1] * p[4] - t5 - 0.2e1 * t6;
    t2 = t4 * p[3] + t8 * (t7 * p[7] + (-p[9] + p[11]) * beta[1]) + 0.2e1 * beta[0] * p[3] - 0.2e1 * t11 - t2;
    t4 = t12 * t9 - t2 * t3;
    t2 = -t2;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t8 - 0.3e1);
    t5 = t1 * (t12 + t2);
    t6 = t8 * beta[0];
    t7 = -0.1e1 + t6;
    t10 = t8 * beta[1];
    t11 = -0.1e1 + t10;
    T t13 = t8 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t14 = t4 * (t12 * t13 - t6 * t2);
    T t15 = t8 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t16 = t4 * (-t10 * t12 + t15 * t2);
    T t17 = t4 * (t12 * beta[1] + t2 * beta[0]);
    T t18 = t8 * q[10];
    T t19 = t14 * q[6] + t16 * q[8] + t4 * (q[4] * t2 * t11 + q[2] * t12 * t7) + t5 * q[0] + t18 * t17;
    t3 = -t3;
    t1 = t1 * (t9 + t3);
    t6 = t4 * (t13 * t3 - t6 * t9);
    t10 = t4 * (-t10 * t3 + t15 * t9);
    t13 = t4 * (t3 * beta[1] + t9 * beta[0]);
    t15 = t1 * q[0] + t10 * q[8] + t4 * (q[4] * t9 * t11 + q[2] * t7 * t3) + t6 * q[6] + t18 * t13;
    t18 = t10 * t15 + t16 * t19;
    T t20 = t8 * q[11];
    T t21 = t20 * t17 + t14 * q[7] + t16 * q[9] + t4 * (q[5] * t2 * t11 + q[3] * t12 * t7) + t5 * q[1];
    t20 = t1 * q[1] + t10 * q[9] + t4 * (q[5] * t9 * t11 + q[3] * t7 * t3) + t6 * q[7] + t20 * t13;
    T t22 = pow(t20, 0.2e1);
    T t23 = pow(t15, 0.2e1);
    T t24 = pow(t21, 0.2e1);
    T t25 = pow(t19, 0.2e1);
    T t26 = 0.1e1 / 0.2e1;
    t26 = t26 * (t22 + t23 + t24 + t25) - 0.1e1;
    T t27 = t16 * t5;
    T t28 = t10 * t1;
    t24 = 0.1e1 - t24 - t25;
    T t29 = t10 * t19 + t15 * t16;
    T t30 = t15 * t19 + t20 * t21;
    t22 = 0.1e1 - t22 - t23;
    T t31 = lambda * t18;
    t7 = t4 * t7;
    T t32 = t10 * t3;
    T t33 = t16 * t12;
    t4 = t4 * t11;
    t11 = t16 * t2;
    T t34 = t10 * t9;
    T t35 = (t18 * t4 * (t15 * t9 + t19 * t2) + t26 * t4 * (t11 + t34)) * lambda + mu * (t29 * t4 * (t15 * t2 + t19 * t9) + t30 * t4 * (t10 * t2 + t16 * t9) - t4 * (t11 * t24 + t34 * t22) + 0.2e1 * t4 * (t11 * t25 + t34 * t23));
    t2 = mu * (t29 * t4 * (t2 * t20 + t21 * t9) + 0.2e1 * t4 * (t11 * t21 * t19 + t34 * t20 * t15)) + t31 * t4 * (t2 * t21 + t20 * t9);
    t4 = t10 * t6;
    t9 = t16 * t14;
    t11 = (t18 * (t14 * t19 + t15 * t6) + t26 * (t9 + t4)) * lambda + mu * (t29 * (t14 * t15 + t19 * t6) + t30 * (t10 * t14 + t16 * t6) - t4 * t22 - t9 * t24 + 0.2e1 * t4 * t23 + 0.2e1 * t9 * t25);
    t4 = mu * (t29 * (t14 * t20 + t21 * t6) + 0.2e1 * t4 * t20 * t15 + 0.2e1 * t21 * t9 * t19) + t31 * (t14 * t21 + t20 * t6);
    t6 = pow(t10, 0.2e1);
    t9 = pow(t16, 0.2e1);
    t14 = (t26 * (t6 + t9) + pow(t18, 0.2e1)) * lambda + mu * (-t22 * t6 - t9 * t24 + pow(t29, 0.2e1) + 0.2e1 * t10 * (t10 * t23 + t16 * t30) + 0.2e1 * t9 * t25);
    t6 = mu * (t29 * (t10 * t21 + t16 * t20) + 0.2e1 * t20 * t6 * t15 + 0.2e1 * t21 * t9 * t19) + t31 * (t10 * t20 + t16 * t21);
    t9 = t17 * t16;
    t34 = t13 * t10;
    T t36 = mu * (-t8 * (-t29 * (t13 * t19 + t15 * t17) - t30 * (t10 * t17 + t13 * t16) + t9 * t24 + t34 * t22) + 0.8e1 * t34 * t23 + 0.8e1 * t9 * t25) + t8 * lambda * (t18 * (t13 * t15 + t17 * t19) + t26 * (t34 + t9));
    t8 = mu * (0.8e1 * t34 * t20 * t15 + 0.8e1 * t21 * t9 * t19 + t8 * t29 * (t13 * t21 + t20 * t17)) + t31 * t8 * (t20 * t13 + t17 * t21);
    Vector<T, 12> hessianc9;
    hessianc9[0] = (t18 * (t1 * t15 + t19 * t5) + t26 * (t28 + t27)) * lambda + mu * ((t1 * t19 + t15 * t5) * t29 + t30 * (t1 * t16 + t10 * t5) - t27 * t24 - t28 * t22 + 0.2e1 * t28 * t23 + 0.2e1 * t27 * t25);
    hessianc9[1] = mu * (t29 * (t1 * t21 + t20 * t5) + 0.2e1 * t28 * t20 * t15 + 0.2e1 * t27 * t21 * t19) + t31 * (t1 * t20 + t21 * t5);
    hessianc9[2] = (t18 * t7 * (t12 * t19 + t15 * t3) + t26 * t7 * (t32 + t33)) * lambda + mu * (t29 * t7 * (t12 * t15 + t19 * t3) + t30 * t7 * (t10 * t12 + t16 * t3) - t7 * (t32 * t22 + t33 * t24) + 0.2e1 * t7 * (t32 * t23 + t33 * t25));
    hessianc9[3] = mu * (t29 * t7 * (t12 * t20 + t21 * t3) + 0.2e1 * t7 * (t32 * t20 * t15 + t33 * t21 * t19)) + t31 * t7 * (t12 * t21 + t20 * t3);
    hessianc9[4] = t35;
    hessianc9[5] = t2;
    hessianc9[6] = t11;
    hessianc9[7] = t4;
    hessianc9[8] = t14;
    hessianc9[9] = t6;
    hessianc9[10] = t36;
    hessianc9[11] = t8;
    hessian.col(8) = hessianc9;
}

void computeHessianc10(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = 0.2e1;
    T t3 = -t1 * t2 + 0.1e1;
    T t4 = 0.1e1 - beta[0] - beta[1];
    T t5 = t2 * beta[0] - 0.1e1;
    T t6 = -beta[0] + t4;
    T t7 = t3 * p[0];
    T t8 = t4 * p[0];
    T t9 = 0.4e1;
    T t10 = -t2 * (-beta[0] * p[2] + t8) + t9 * (t6 * p[6] + (-p[8] + p[10]) * beta[1]) + t5 * p[2] - t7;
    T t11 = t2 * beta[1] - 0.1e1;
    T t12 = -beta[1] + t4;
    t3 = t3 * p[1];
    t4 = t4 * p[1];
    T t13 = -t2 * (-beta[1] * p[5] + t4) + t9 * (t12 * p[9] + (-p[7] + p[11]) * beta[0]) + t11 * p[5] - t3;
    t7 = -t2 * (-beta[1] * p[4] + t8) + t9 * (t12 * p[8] + (-p[6] + p[10]) * beta[0]) + t11 * p[4] - t7;
    t3 = -t2 * (-beta[0] * p[3] + t4) + t9 * (t6 * p[7] + (-p[9] + p[11]) * beta[1]) + t5 * p[3] - t3;
    t4 = t10 * t13 - t3 * t7;
    t3 = -t3;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t9 - 0.3e1);
    t5 = t1 * (t13 + t3);
    t6 = t9 * beta[0];
    t8 = -0.1e1 + t6;
    t11 = t9 * beta[1];
    t12 = -0.1e1 + t11;
    T t14 = t9 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t15 = t4 * (t13 * t14 - t6 * t3);
    T t16 = t9 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t17 = t4 * (-t11 * t13 + t16 * t3);
    T t18 = t4 * (t13 * beta[1] + t3 * beta[0]);
    T t19 = t9 * q[11];
    T t20 = t19 * t18 + t15 * q[7] + t17 * q[9] + t4 * (q[5] * t3 * t12 + q[3] * t13 * t8) + t5 * q[1];
    t7 = -t7;
    t1 = t1 * (t10 + t7);
    t6 = t4 * (-t6 * t10 + t14 * t7);
    t11 = t4 * (t10 * t16 - t11 * t7);
    t14 = t4 * (t10 * beta[0] + t7 * beta[1]);
    t16 = t19 * t14 + t1 * q[1] + t11 * q[9] + t4 * (q[5] * t10 * t12 + q[3] * t8 * t7) + t6 * q[7];
    t19 = t16 * t11;
    T t21 = t20 * t17;
    T t22 = t21 + t19;
    T t23 = t9 * q[10];
    T t24 = t23 * t18 + t15 * q[6] + t17 * q[8] + t4 * (q[4] * t3 * t12 + q[2] * t13 * t8) + t5 * q[0];
    t23 = t1 * q[0] + t11 * q[8] + t4 * (q[4] * t10 * t12 + q[2] * t8 * t7) + t6 * q[6] + t23 * t14;
    T t25 = t23 * t1;
    T t26 = t24 * t5;
    T t27 = t11 * t20 + t16 * t17;
    T t28 = lambda * t22;
    T t29 = pow(t23, 0.2e1);
    T t30 = pow(t16, 0.2e1);
    T t31 = pow(t24, 0.2e1);
    T t32 = pow(t20, 0.2e1);
    T t33 = 0.1e1 / 0.2e1;
    t33 = t33 * (t32 + t31 + t29 + t30) - 0.1e1;
    T t34 = t11 * t1;
    T t35 = t17 * t5;
    t31 = 0.1e1 - t32 - t31;
    T t36 = t16 * t20 + t23 * t24;
    t29 = 0.1e1 - t29 - t30;
    T t37 = t23 * t7;
    T t38 = t24 * t13;
    t8 = t4 * t8;
    T t39 = t11 * t7;
    T t40 = t17 * t13;
    T t41 = t24 * t3;
    T t42 = t23 * t10;
    t4 = t4 * t12;
    t12 = mu * (t2 * t4 * (t42 * t19 + t41 * t21) + t27 * t4 * (t10 * t24 + t23 * t3)) + t28 * t4 * (t41 + t42);
    t41 = t17 * t3;
    t42 = t11 * t10;
    t3 = (t22 * t4 * (t10 * t16 + t20 * t3) + t33 * t4 * (t41 + t42)) * lambda + mu * (t2 * t4 * (t42 * t30 + t41 * t32) + t27 * t4 * (t10 * t20 + t16 * t3) + t36 * t4 * (t10 * t17 + t11 * t3) - t4 * (t42 * t29 + t41 * t31));
    t4 = t23 * t6;
    t10 = t24 * t15;
    t4 = mu * (t2 * (t10 * t21 + t4 * t19) + t27 * (t15 * t23 + t24 * t6)) + t28 * (t4 + t10);
    t10 = t11 * t6;
    t41 = t17 * t15;
    t6 = (t22 * (t15 * t20 + t16 * t6) + t33 * (t10 + t41)) * lambda + mu * (t2 * (t10 * t30 + t41 * t32) + t27 * (t15 * t16 + t20 * t6) + t36 * (t11 * t15 + t17 * t6) - t10 * t29 - t41 * t31);
    t10 = pow(t11, 0.2e1);
    t15 = pow(t17, 0.2e1);
    t41 = mu * (t2 * (t10 * t16 * t23 + t15 * t20 * t24) + t27 * (t11 * t24 + t17 * t23)) + t28 * (t11 * t23 + t17 * t24);
    t42 = t11 * t30;
    t10 = (t33 * (t15 + t10) + pow(t22, 0.2e1)) * lambda + mu * (-t10 * t29 - t15 * t31 + t2 * (t11 * (t17 * t36 + t42) + t15 * t32) + pow(t27, 0.2e1));
    t15 = t23 * t14;
    T t43 = t24 * t18;
    t15 = mu * (0.8e1 * t15 * t19 + 0.8e1 * t43 * t21 + t9 * t27 * (t14 * t24 + t23 * t18)) + t28 * t9 * (t15 + t43);
    t43 = t18 * t17;
    T t44 = t14 * t11;
    t9 = mu * (0.8e1 * t42 * t14 + 0.8e1 * t43 * t32 - t9 * (-t27 * (t14 * t20 + t16 * t18) - t36 * (t11 * t18 + t14 * t17) + t43 * t31 + t44 * t29)) + t9 * lambda * (t22 * (t14 * t16 + t18 * t20) + t33 * (t43 + t44));
    Vector<T, 12> hessianc10;
    hessianc10[0] = mu * (t2 * (t25 * t19 + t26 * t21) + (t1 * t24 + t23 * t5) * t27) + t28 * (t26 + t25);
    hessianc10[1] = (t22 * (t1 * t16 + t20 * t5) + t33 * (t35 + t34)) * lambda + mu * (t2 * (t34 * t30 + t35 * t32) + t27 * (t1 * t20 + t16 * t5) + t36 * (t1 * t17 + t11 * t5) - t34 * t29 - t35 * t31);
    hessianc10[2] = mu * (t2 * t8 * (t37 * t19 + t38 * t21) + t27 * t8 * (t13 * t23 + t24 * t7)) + t28 * t8 * (t37 + t38);
    hessianc10[3] = (t22 * t8 * (t13 * t20 + t16 * t7) + t33 * t8 * (t39 + t40)) * lambda + mu * (t2 * t8 * (t39 * t30 + t40 * t32) + t27 * t8 * (t13 * t16 + t20 * t7) + t36 * t8 * (t11 * t13 + t17 * t7) - t8 * (t39 * t29 + t40 * t31));
    hessianc10[4] = t12;
    hessianc10[5] = t3;
    hessianc10[6] = t4;
    hessianc10[7] = t6;
    hessianc10[8] = t41;
    hessianc10[9] = t10;
    hessianc10[10] = t15;
    hessianc10[11] = t9;
    hessian.col(9) = hessianc10;
}

void computeHessianc11(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[0] + beta[1];
    T t2 = -0.2e1 * t1 + 0.1e1;
    T t3 = 0.1e1 - beta[0] - beta[1];
    T t4 = 0.2e1 * beta[0] - 0.1e1;
    T t5 = -beta[0] + t3;
    T t6 = t2 * p[0];
    T t7 = t3 * p[0];
    T t8 = 0.4e1;
    T t9 = t8 * (t5 * p[6] + (-p[8] + p[10]) * beta[1]) + t4 * p[2] - t6 + 0.2e1 * beta[0] * p[2] - 0.2e1 * t7;
    T t10 = 0.2e1 * beta[1] - 0.1e1;
    T t11 = -beta[1] + t3;
    t2 = t2 * p[1];
    t3 = t3 * p[1];
    T t12 = t8 * (t11 * p[9] + (-p[7] + p[11]) * beta[0]) + t10 * p[5] - t2 + 0.2e1 * beta[1] * p[5] - 0.2e1 * t3;
    t6 = t8 * (t11 * p[8] + (-p[6] + p[10]) * beta[0]) + t10 * p[4] - t6 + 0.2e1 * beta[1] * p[4] - 0.2e1 * t7;
    t2 = t8 * (t5 * p[7] + (-p[9] + p[11]) * beta[1]) + t4 * p[3] - t2 + 0.2e1 * beta[0] * p[3] - 0.2e1 * t3;
    t3 = t12 * t9 - t2 * t6;
    t2 = -t2;
    t3 = 0.1e1 / t3;
    t1 = t3 * (t1 * t8 - 0.3e1);
    t4 = t1 * (t12 + t2);
    t5 = t8 * beta[0];
    t7 = -0.1e1 + t5;
    t10 = t8 * beta[1];
    t11 = -0.1e1 + t10;
    T t13 = t8 * (0.1e1 - beta[1]) - 0.8e1 * beta[0];
    T t14 = t3 * (t12 * t13 - t5 * t2);
    T t15 = t8 * (0.1e1 - beta[0]) - 0.8e1 * beta[1];
    T t16 = t3 * (-t10 * t12 + t15 * t2);
    T t17 = t3 * (t12 * beta[1] + t2 * beta[0]);
    T t18 = t8 * q[10];
    T t19 = t14 * q[6] + t16 * q[8] + t3 * (q[4] * t2 * t11 + q[2] * t12 * t7) + t4 * q[0] + t18 * t17;
    t6 = -t6;
    t1 = t1 * (t9 + t6);
    t5 = t3 * (t13 * t6 - t5 * t9);
    t10 = t3 * (-t10 * t6 + t15 * t9);
    t13 = t3 * (t6 * beta[1] + t9 * beta[0]);
    t15 = t1 * q[0] + t10 * q[8] + t3 * (q[4] * t9 * t11 + q[2] * t7 * t6) + t5 * q[6] + t18 * t13;
    t18 = t13 * t15 + t17 * t19;
    T t20 = t8 * q[11];
    T t21 = t14 * q[7] + t16 * q[9] + t3 * (q[5] * t2 * t11 + q[3] * t12 * t7) + t4 * q[1] + t20 * t17;
    t20 = t20 * t13 + t1 * q[1] + t10 * q[9] + t3 * (q[5] * t9 * t11 + q[3] * t7 * t6) + t5 * q[7];
    T t22 = pow(t20, 0.2e1);
    T t23 = pow(t15, 0.2e1);
    T t24 = pow(t21, 0.2e1);
    T t25 = pow(t19, 0.2e1);
    T t26 = 0.1e1 / 0.2e1;
    t26 = t26 * (t25 + t22 + t23 + t24) - 0.1e1;
    T t27 = t17 * t4;
    T t28 = t13 * t1;
    t24 = 0.1e1 - t25 - t24;
    T t29 = t13 * t19 + t15 * t17;
    T t30 = t15 * t19 + t20 * t21;
    t22 = 0.1e1 - t22 - t23;
    T t31 = t8 * lambda * t18;
    t7 = t3 * t7;
    T t32 = t13 * t6;
    T t33 = t17 * t12;
    T t34 = mu * (0.8e1 * t7 * (t32 * t20 * t15 + t33 * t21 * t19) + t8 * t7 * (t12 * t20 + t21 * t6) * t29) + t31 * t7 * (t12 * t21 + t20 * t6);
    t3 = t3 * t11;
    t11 = t17 * t2;
    T t35 = t13 * t9;
    T t36 = mu * (t8 * (t29 * t3 * (t15 * t2 + t19 * t9) + t30 * t3 * (t13 * t2 + t17 * t9) - t3 * (t11 * t24 + t35 * t22)) + 0.8e1 * t3 * (t11 * t25 + t35 * t23)) + t8 * lambda * (t18 * t3 * (t15 * t9 + t19 * t2) + t26 * t3 * (t11 + t35));
    t2 = mu * (0.8e1 * t3 * (t11 * t21 * t19 + t35 * t20 * t15) + t8 * t3 * (t2 * t20 + t21 * t9) * t29) + t31 * t3 * (t2 * t21 + t20 * t9);
    t3 = t17 * t14;
    t9 = t13 * t5;
    t11 = mu * (t8 * (t29 * (t14 * t15 + t19 * t5) + t30 * (t13 * t14 + t17 * t5) - t3 * t24 - t9 * t22) + 0.8e1 * t9 * t23 + 0.8e1 * t3 * t25) + t8 * lambda * (t18 * (t14 * t19 + t15 * t5) + t26 * (t3 + t9));
    t35 = t17 * t16;
    T t37 = t13 * t10;
    T t38 = mu * (t8 * (t29 * (t10 * t19 + t15 * t16) + t30 * (t10 * t17 + t13 * t16) - t35 * t24 - t37 * t22) + 0.8e1 * t37 * t23 + 0.8e1 * t35 * t25) + t8 * lambda * (t18 * (t10 * t15 + t16 * t19) + t26 * (t37 + t35));
    t10 = mu * (0.8e1 * t37 * t20 * t15 + 0.8e1 * t35 * t21 * t19 + t8 * (t10 * t21 + t16 * t20) * t29) + t31 * (t10 * t20 + t16 * t21);
    t16 = pow(t13, 0.2e1);
    t35 = pow(t17, 0.2e1);
    t37 = 0.16e2;
    T t39 = 0.32e2;
    T t40 = mu * (t39 * (t13 * (t13 * t23 + t17 * t30) + t35 * t25) - t37 * (t16 * t22 + t35 * t24 - pow(t29, 0.2e1))) + t37 * lambda * (t26 * (t35 + t16) + pow(t18, 0.2e1));
    t16 = mu * (t39 * (t16 * t20 * t15 + t35 * t21 * t19) + t37 * t29 * (t13 * t21 + t20 * t17)) + t37 * lambda * (t20 * t13 + t17 * t21) * t18;
    Vector<T, 12> hessianc11;
    hessianc11[0] = mu * (-t8 * (-(t1 * t19 + t15 * t4) * t29 - t30 * (t1 * t17 + t13 * t4) + t27 * t24 + t28 * t22) + 0.8e1 * t28 * t23 + 0.8e1 * t27 * t25) + t8 * lambda * (t18 * (t1 * t15 + t19 * t4) + t26 * (t28 + t27));
    hessianc11[1] = mu * (0.8e1 * t28 * t20 * t15 + 0.8e1 * t27 * t21 * t19 + t8 * (t1 * t21 + t20 * t4) * t29) + t31 * (t1 * t20 + t21 * t4);
    hessianc11[2] = mu * (t8 * (t29 * t7 * (t12 * t15 + t19 * t6) + t30 * t7 * (t12 * t13 + t17 * t6) - t7 * (t32 * t22 + t33 * t24)) + 0.8e1 * t7 * (t32 * t23 + t33 * t25)) + t8 * lambda * (t18 * t7 * (t12 * t19 + t15 * t6) + t26 * t7 * (t33 + t32));
    hessianc11[3] = t34;
    hessianc11[4] = t36;
    hessianc11[5] = t2;
    hessianc11[6] = t11;
    hessianc11[7] = mu * (0.8e1 * t20 * t9 * t15 + 0.8e1 * t3 * t21 * t19 + t8 * (t14 * t20 + t21 * t5) * t29) + t31 * (t14 * t21 + t20 * t5);
    hessianc11[8] = t38;
    hessianc11[9] = t10;
    hessianc11[10] = t40;
    hessianc11[11] = t16;
    hessian.col(10) = hessianc11;
}

void computeHessianc12(T lambda, T mu, const T* q, const T*p, const Vector<T, 2> beta, Matrix<T, 12, 12>& hessian){
    T t1 = beta[1] + beta[0];
    T t2 = -0.2e1 * t1 + 0.1e1;
    T t3 = 0.1e1 - beta[0] - beta[1];
    T t4 = 0.2e1 * beta[0] - 0.1e1;
    T t5 = beta[0] - t3;
    T t6 = t3 * p[0];
    T t7 = t2 * p[0];
    T t8 = 0.4e1;
    T t9 = -t8 * (t5 * p[6] + (p[8] - p[10]) * beta[1]) + 0.2e1 * beta[0] * p[2] - 0.2e1 * t6 + t4 * p[2] - t7;
    T t10 = 0.2e1 * beta[1] - 0.1e1;
    T t11 = beta[1] - t3;
    t3 = t3 * p[1];
    t2 = t2 * p[1];
    T t12 = -t8 * (t11 * p[9] + (p[7] - p[11]) * beta[0]) + 0.2e1 * beta[1] * p[5] - 0.2e1 * t3 + t10 * p[5] - t2;
    t6 = -t8 * (t11 * p[8] + (p[6] - p[10]) * beta[0]) + 0.2e1 * beta[1] * p[4] - 0.2e1 * t6 + t10 * p[4] - t7;
    t2 = -t8 * (t5 * p[7] + (p[9] - p[11]) * beta[1]) + 0.2e1 * beta[0] * p[3] - 0.2e1 * t3 + t4 * p[3] - t2;
    t3 = t9 * t12;
    t4 = t6 * t2 - t3;
    t5 = -t2;
    t4 = 0.1e1 / t4;
    t1 = t4 * (t1 * t8 - 0.3e1);
    t7 = t1 * (t12 + t5);
    t10 = t8 * beta[0];
    t11 = -0.1e1 + t10;
    T t13 = t8 * beta[1];
    T t14 = -0.1e1 + t13;
    T t15 = 0.8e1;
    T t16 = t8 * (0.1e1 - beta[1]) - t15 * beta[0];
    T t17 = t4 * (t10 * t5 - t12 * t16);
    T t18 = -t15 * beta[1] + t8 * (0.1e1 - beta[0]);
    T t19 = t4 * (t13 * t12 - t18 * t5);
    T t20 = t4 * (t12 * beta[1] + t5 * beta[0]);
    T t21 = t8 * q[11];
    T t22 = -t21 * t20 + t17 * q[7] + t19 * q[9] - t4 * (q[3] * t12 * t11 + q[5] * t5 * t14) - t7 * q[1];
    T t23 = -t6;
    t1 = t1 * (t9 + t23);
    t10 = t4 * (t10 * t9 - t16 * t23);
    t13 = t4 * (t13 * t23 - t18 * t9);
    t16 = t4 * (t23 * beta[1] + t9 * beta[0]);
    t18 = -t21 * t16 - t1 * q[1] + t10 * q[7] + t13 * q[9] - t4 * (q[3] * t11 * t23 + q[5] * t9 * t14);
    t21 = t22 * t20;
    T t24 = t18 * t16;
    T t25 = t24 + t21;
    T t26 = t8 * q[10];
    T t27 = -t26 * t20 + t17 * q[6] + t19 * q[8] - t4 * (q[2] * t12 * t11 + q[4] * t5 * t14) - t7 * q[0];
    t26 = -t26 * t16 - t1 * q[0] + t10 * q[6] + t13 * q[8] - t4 * (q[2] * t11 * t23 + q[4] * t9 * t14);
    T t28 = t27 * t7;
    T t29 = t26 * t1;
    T t30 = t16 * t22 + t18 * t20;
    T t31 = t8 * lambda * t25;
    T t32 = pow(t26, 0.2e1);
    T t33 = pow(t18, 0.2e1);
    T t34 = pow(t22, 0.2e1);
    T t35 = pow(t27, 0.2e1);
    T t36 = t6 * t5;
    T t37 = t2 * t23;
    T t38 = 0.1e1 / 0.2e1;
    t38 = t38 * (t4 * (t37 + t36) + t32 + t33 + t34 + t35) + t3 * t4;
    T t39 = t20 * t7;
    T t40 = t16 * t1;
    t35 = t4 * (t36 + t3) + t34 + t35;
    t36 = t27 * t26;
    T t41 = t22 * t18;
    t3 = (t4 * (t37 + t3) + t32 + t33) * t16;
    t2 = t12 * t4 * (t2 + t5) + 0.2e1 * t36 + 0.2e1 * t41 + t9 * t4 * (t6 + t23);
    t6 = t26 * t23;
    t32 = t27 * t12;
    t11 = t4 * t11;
    t36 = t16 * t23;
    t37 = t20 * t12;
    t36 = mu * (t15 * t11 * (t36 * t33 + t37 * t34) + t8 * (t30 * t11 * (t12 * t18 + t22 * t23) + t11 * (t3 * t23 + t37 * t35)) + 0.2e1 * t11 * (t12 * t16 + t20 * t23) * t2) + t8 * lambda * (t25 * t11 * (t12 * t22 + t18 * t23) + t38 * t11 * (t37 + t36));
    t37 = t27 * t5;
    t41 = t26 * t9;
    t4 = t4 * t14;
    t14 = t16 * t9;
    T t42 = t20 * t5;
    t14 = mu * (t15 * t4 * (t14 * t33 + t42 * t34) + t8 * (t30 * t4 * (t18 * t5 + t22 * t9) + t4 * (t3 * t9 + t42 * t35)) + 0.2e1 * t4 * (t16 * t5 + t20 * t9) * t2) + t8 * lambda * (t25 * t4 * (t18 * t9 + t22 * t5) + t38 * t4 * (t42 + t14));
    t42 = t26 * t10;
    T t43 = t27 * t17;
    T t44 = t16 * t10;
    T t45 = t20 * t17;
    t44 = mu * (-t15 * (t44 * t33 + t45 * t34) - t8 * (t30 * (t10 * t22 + t17 * t18) + t45 * t35 + t3 * t10) - 0.2e1 * (t10 * t20 + t16 * t17) * t2) - t8 * lambda * (t25 * (t10 * t18 + t17 * t22) + t38 * (t45 + t44));
    t45 = t27 * t19;
    T t46 = t26 * t13;
    t45 = mu * (-t15 * (t45 * t21 + t46 * t24) - t8 * (t13 * t27 + t19 * t26) * t30) - t31 * (t45 + t46);
    t46 = t20 * t19;
    T t47 = t16 * t13;
    t13 = mu * (-t15 * (t47 * t33 + t46 * t34) - t8 * (t30 * (t13 * t22 + t18 * t19) + t3 * t13 + t46 * t35) - 0.2e1 * (t13 * t20 + t16 * t19) * t2) - t8 * lambda * (t25 * (t13 * t18 + t19 * t22) + t38 * (t47 + t46));
    t19 = pow(t16, 0.2e1);
    t46 = pow(t20, 0.2e1);
    t47 = 0.16e2;
    T t48 = 0.32e2;
    T t49 = mu * (t48 * (t18 * t19 * t26 + t22 * t46 * t27) + t47 * (t16 * t27 + t26 * t20) * t30) + t47 * lambda * t25 * (t26 * t16 + t20 * t27);
    t19 = mu * (t47 * (t16 * (t2 * t20 + t3) + pow(t30, 0.2e1) + t46 * t35) + t48 * (t19 * t33 + t46 * t34)) + t47 * lambda * (t38 * (t19 + t46) + pow(t25, 0.2e1));
    Vector<T, 12> hessianc12;
    hessianc12[0] = mu * (t15 * (t28 * t21 + t29 * t24) + t8 * (t1 * t27 + t26 * t7) * t30) + t31 * (t28 + t29);
    hessianc12[1] = mu * (t15 * (t40 * t33 + t39 * t34) + t8 * (t30 * (t1 * t22 + t18 * t7) + t39 * t35 + t3 * t1) + 0.2e1 * (t1 * t20 + t16 * t7) * t2) + t8 * lambda * (t25 * (t1 * t18 + t22 * t7) + t38 * (t40 + t39));
    hessianc12[2] = mu * (t15 * t11 * (t32 * t21 + t6 * t24) + t8 * t11 * (t12 * t26 + t23 * t27) * t30) + t31 * t11 * (t6 + t32);
    hessianc12[3] = t36;
    hessianc12[4] = mu * (t15 * t4 * (t37 * t21 + t41 * t24) + t8 * t4 * (t26 * t5 + t27 * t9) * t30) + t31 * t4 * (t41 + t37);
    hessianc12[5] = t14;
    hessianc12[6] = mu * (-t15 * (t43 * t21 + t42 * t24) - t8 * (t10 * t27 + t17 * t26) * t30) - t31 * (t43 + t42);
    hessianc12[7] = t44;
    hessianc12[8] = t45;
    hessianc12[9] = t13;
    hessianc12[10] = t49;
    hessianc12[11] = t19;

    hessian.col(11) = hessianc12;
}

Matrix<T, 18, 18> computePointEnergyDensityHessian(T lambda, T mu, const Matrix<T,6,3> & vertices, const Matrix<T,6,3> & undeformed_vertices, const Vector<T, 2> beta){
        
    T q[12];
    q[0] = vertices(0,0); q[1] = vertices(0,1);
    q[2] = vertices(1,0); q[3] = vertices(1,1);
    q[4] = vertices(2,0); q[5] = vertices(2,1);   
    q[6] = vertices(3,0); q[7] = vertices(3,1);
    q[8] = vertices(4,0); q[9] = vertices(4,1);
    q[10] = vertices(5,0); q[11] = vertices(5,1);   
    T p[12];
    p[0] = undeformed_vertices(0,0); p[1] = undeformed_vertices(0,1);
    p[2] = undeformed_vertices(1,0); p[3] = undeformed_vertices(1,1);
    p[4] = undeformed_vertices(2,0); p[5] = undeformed_vertices(2,1);
    p[6] = undeformed_vertices(3,0); p[7] = undeformed_vertices(3,1);
    p[8] = undeformed_vertices(4,0); p[9] = undeformed_vertices(4,1);
    p[10] = undeformed_vertices(5,0); p[11] = undeformed_vertices(5,1);
        
    Matrix<T, 12, 12> hessian;
    computeHessianc1(lambda, mu, q, p, beta, hessian);
    computeHessianc2(lambda, mu, q, p, beta, hessian);
    computeHessianc3(lambda, mu, q, p, beta, hessian);
    computeHessianc4(lambda, mu, q, p, beta, hessian);
    computeHessianc5(lambda, mu, q, p, beta, hessian);
    computeHessianc6(lambda, mu, q, p, beta, hessian);
    computeHessianc7(lambda, mu, q, p, beta, hessian);
    computeHessianc8(lambda, mu, q, p, beta, hessian);
    computeHessianc9(lambda, mu, q, p, beta, hessian);
    computeHessianc10(lambda, mu, q, p, beta, hessian);
    computeHessianc11(lambda, mu, q, p, beta, hessian);
    computeHessianc12(lambda, mu, q, p, beta, hessian);
    
    Matrix<T, 18, 18> energy_hessian;
    for(int i = 0; i < 6; ++i){
        for(int j = 0; j < 6; ++j){
            Matrix<T, 3, 3> block; block.setZero();
            block.block(0,0,2,2) = hessian.block(i*2, j*2, 2, 2);

            energy_hessian.block<3,3>(i*3, 3*j) = block;
        }
    }
    return energy_hessian;
}
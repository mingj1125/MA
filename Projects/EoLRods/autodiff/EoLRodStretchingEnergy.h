#ifndef EOL_ROD_STRETCHING_ENERGY_H
#define EOL_ROD_STRETCHING_ENERGY_H

#include "../include/VecMatDef.h"

// stretching energy with engineering strain
/*
template <class T>
T stretchingEnergyLocal(T ks, const Matrix<T,3,1> & X1, const Matrix<T,3,1> & X2, const Matrix<T,3,1> & x1, const Matrix<T,3,1> & x2)
{
    // T _i_var[24];
	// _i_var[0] = (X2(1,0))-(X1(1,0));
	// _i_var[1] = (X2(0,0))-(X1(0,0));
	// _i_var[2] = (x2(1,0))-(x1(1,0));
	// _i_var[3] = (x2(0,0))-(x1(0,0));
	// _i_var[4] = (X2(2,0))-(X1(2,0));
	// _i_var[5] = (_i_var[0])*(_i_var[0]);
	// _i_var[6] = (_i_var[1])*(_i_var[1]);
	// _i_var[7] = (x2(2,0))-(x1(2,0));
	// _i_var[8] = (_i_var[2])*(_i_var[2]);
	// _i_var[9] = (_i_var[3])*(_i_var[3]);
	// _i_var[10] = (_i_var[4])*(_i_var[4]);
	// _i_var[11] = (_i_var[6])+(_i_var[5]);
	// _i_var[12] = (_i_var[7])*(_i_var[7]);
	// _i_var[13] = (_i_var[9])+(_i_var[8]);
	// _i_var[14] = (_i_var[11])+(_i_var[10]);
	// _i_var[15] = (_i_var[13])+(_i_var[12]);
	// _i_var[16] = std::sqrt(_i_var[14]);
	// _i_var[17] = std::sqrt(_i_var[15]);
	// _i_var[18] = 0.5;
	// _i_var[19] = (_i_var[17])-(_i_var[16]);
	// _i_var[20] = (_i_var[18])*(ks);
	// _i_var[21] = (_i_var[19])*(_i_var[19]);
	// _i_var[22] = (_i_var[20])/(_i_var[16]);
	// _i_var[23] = (_i_var[22])*(_i_var[21]);
	// return _i_var[23];

	T q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	T p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	T t4 = (q[0] - q[3]);
	T t5 = t4 * t4;
	T t9 = (q[1] - q[4]);
	T t10 = t9 * t9;
	T t14 = (q[2] - q[5]);
	T t15 = t14 * t14;
	T t17 = std::sqrt(t5 + t10 + t15);
	T t21 = (p[0] - p[3]);
	T t22 = t21 * t21;
	T t26 = (p[1] - p[4]);
	T t27 = t26 * t26;
	T t31 = (p[2] - p[5]);
	T t32 = t31 * t31;
	T t34 = std::sqrt(t22 + t27 + t32);
	T t38 = std::pow(1 / t34 * t17 - 1, 2);
	return 0.5 * t34 * t38 * ks;
}

template <class T>
void computeEoLRodStretchingEnergyGradient(double ks, const Matrix<T, 3, 1> & X1, const Matrix<T, 3, 1> & X2, const Matrix<T, 3, 1> & x1, const Matrix<T, 3, 1> & x2, 
	Matrix<T, 12, 1>& energygradient){
	// double _i_var[58];
	// _i_var[0] = (X2(1,0))-(X1(1,0));
	// _i_var[1] = (X2(0,0))-(X1(0,0));
	// _i_var[2] = (x2(1,0))-(x1(1,0));
	// _i_var[3] = (x2(0,0))-(x1(0,0));
	// _i_var[4] = (X2(2,0))-(X1(2,0));
	// _i_var[5] = (_i_var[0])*(_i_var[0]);
	// _i_var[6] = (_i_var[1])*(_i_var[1]);
	// _i_var[7] = (x2(2,0))-(x1(2,0));
	// _i_var[8] = (_i_var[2])*(_i_var[2]);
	// _i_var[9] = (_i_var[3])*(_i_var[3]);
	// _i_var[10] = (_i_var[4])*(_i_var[4]);
	// _i_var[11] = (_i_var[6])+(_i_var[5]);
	// _i_var[12] = (_i_var[7])*(_i_var[7]);
	// _i_var[13] = (_i_var[9])+(_i_var[8]);
	// _i_var[14] = (_i_var[11])+(_i_var[10]);
	// _i_var[15] = (_i_var[13])+(_i_var[12]);
	// _i_var[16] = 0.5;
	// _i_var[17] = std::sqrt(_i_var[14]);
	// _i_var[18] = std::sqrt(_i_var[15]);
	// _i_var[19] = (_i_var[16])*(ks);
	// _i_var[20] = (_i_var[18])-(_i_var[17]);
	// _i_var[21] = (_i_var[19])/(_i_var[17]);
	// _i_var[22] = (_i_var[17])*(_i_var[17]);
	// _i_var[23] = (_i_var[21])*(_i_var[20]);
	// _i_var[24] = 2;
	// _i_var[25] = (_i_var[19])/(_i_var[22]);
	// _i_var[26] = -1;
	// _i_var[27] = (_i_var[24])*(_i_var[23]);
	// _i_var[28] = -(_i_var[25]);
	// _i_var[29] = (_i_var[20])*(_i_var[20]);
	// _i_var[30] = (_i_var[24])*(_i_var[18]);
	// _i_var[31] = 1;
	// _i_var[32] = (_i_var[24])*(_i_var[17]);
	// _i_var[33] = (_i_var[27])*(_i_var[26]);
	// _i_var[34] = (_i_var[29])*(_i_var[28]);
	// _i_var[35] = (_i_var[31])/(_i_var[30]);
	// _i_var[36] = (_i_var[31])/(_i_var[32]);
	// _i_var[37] = (_i_var[34])+(_i_var[33]);
	// _i_var[38] = (_i_var[27])*(_i_var[35]);
	// _i_var[39] = (_i_var[37])*(_i_var[36]);
	// _i_var[40] = (_i_var[38])*(_i_var[3]);
	// _i_var[41] = (_i_var[38])*(_i_var[2]);
	// _i_var[42] = (_i_var[38])*(_i_var[7]);
	// _i_var[43] = (_i_var[39])*(_i_var[1]);
	// _i_var[44] = (_i_var[39])*(_i_var[0]);
	// _i_var[45] = (_i_var[39])*(_i_var[4]);
	// _i_var[46] = (_i_var[24])*(_i_var[40]);
	// _i_var[47] = (_i_var[24])*(_i_var[41]);
	// _i_var[48] = (_i_var[24])*(_i_var[42]);
	// _i_var[49] = (_i_var[24])*(_i_var[43]);
	// _i_var[50] = (_i_var[24])*(_i_var[44]);
	// _i_var[51] = (_i_var[24])*(_i_var[45]);
	// _i_var[52] = (_i_var[46])*(_i_var[26]);
	// _i_var[53] = (_i_var[47])*(_i_var[26]);
	// _i_var[54] = (_i_var[48])*(_i_var[26]);
	// _i_var[55] = (_i_var[49])*(_i_var[26]);
	// _i_var[56] = (_i_var[50])*(_i_var[26]);
	// _i_var[57] = (_i_var[51])*(_i_var[26]);
	// energygradient(0,0) = _i_var[52];
	// energygradient(1,0) = _i_var[53];
	// energygradient(2,0) = _i_var[54];
	// energygradient(3,0) = _i_var[46];
	// energygradient(4,0) = _i_var[47];
	// energygradient(5,0) = _i_var[48];
	// energygradient(6,0) = _i_var[55];
	// energygradient(7,0) = _i_var[56];
	// energygradient(8,0) = _i_var[57];
	// energygradient(9,0) = _i_var[49];
	// energygradient(10,0) = _i_var[50];
	// energygradient(11,0) = _i_var[51];

	T q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	T p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	T t1 = q[0] - q[3];
	T t2 = q[1] - q[4];
	T t3 = q[2] - q[5];
	T t4 = pow(t1, 0.2e1) + pow(t2, 0.2e1) + pow(t3, 0.2e1);
	T t5 = pow(t4, -0.1e1 / 0.2e1);
	T t6 = p[0] - p[3];
	T t7 = p[1] - p[4];
	T t8 = p[2] - p[5];
	T t9 = pow(t6, 0.2e1) + pow(t7, 0.2e1) + pow(t8, 0.2e1);
	T t10 = pow(t9, -0.3e1 / 0.2e1);
	t4 = pow(t9, 0.2e1) * t10 - t4 * t5;
	T t11 = 0.1e1 / t9;
	t11 = -t4 * t10 / 0.2e1 + t11;
	t4 = ks * t4;
	t6 = t4 * t6 * t11;
	t7 = t4 * t7 * t11;
	t8 = t4 * t8 * t11;
	t4 = t4 * t9 * t10 * t5;
	t2 = t4 * t2;
	t3 = t4 * t3;
	t1 = t4 * t1;
	energygradient(0,0) = -t1;
	energygradient(1,0) = -t2;
	energygradient(2,0) = -t3;
	energygradient(3,0) = t1;
	energygradient(4,0) = t2;
	energygradient(5,0) = t3;
	energygradient(6,0) = t6;
	energygradient(7,0) = t7;
	energygradient(8,0) = t8;
	energygradient(9,0) = -t6;
	energygradient(10,0) = -t7;
	energygradient(11,0) = -t8;

}

template <class T>
void computeEoLRodStretchingEnergyHessian(double ks, const Matrix<T, 3, 1> & X1, const Matrix<T, 3, 1> & X2, const Matrix<T, 3, 1> & x1, const Matrix<T, 3, 1> & x2, 
	Matrix<T, 12, 12>& energyhessian){
	double _i_var[163];
	_i_var[0] = (X2(1,0))-(X1(1,0));
	_i_var[1] = (X2(0,0))-(X1(0,0));
	_i_var[2] = (X2(2,0))-(X1(2,0));
	_i_var[3] = (_i_var[0])*(_i_var[0]);
	_i_var[4] = (_i_var[1])*(_i_var[1]);
	_i_var[5] = (_i_var[2])*(_i_var[2]);
	_i_var[6] = (_i_var[4])+(_i_var[3]);
	_i_var[7] = (_i_var[6])+(_i_var[5]);
	_i_var[8] = (x2(1,0))-(x1(1,0));
	_i_var[9] = (x2(0,0))-(x1(0,0));
	_i_var[10] = std::sqrt(_i_var[7]);
	_i_var[11] = (x2(2,0))-(x1(2,0));
	_i_var[12] = (_i_var[8])*(_i_var[8]);
	_i_var[13] = (_i_var[9])*(_i_var[9]);
	_i_var[14] = (_i_var[10])*(_i_var[10]);
	_i_var[15] = 0.5;
	_i_var[16] = (_i_var[11])*(_i_var[11]);
	_i_var[17] = (_i_var[13])+(_i_var[12]);
	_i_var[18] = (_i_var[14])*(_i_var[14]);
	_i_var[19] = (_i_var[15])*(ks);
	_i_var[20] = (_i_var[17])+(_i_var[16]);
	_i_var[21] = (_i_var[19])/(_i_var[18]);
	_i_var[22] = std::sqrt(_i_var[20]);
	_i_var[23] = 2;
	_i_var[24] = -(_i_var[21]);
	_i_var[25] = -1;
	_i_var[26] = (_i_var[23])*(_i_var[22]);
	_i_var[27] = (_i_var[23])*(_i_var[10]);
	_i_var[28] = (_i_var[19])/(_i_var[14]);
	_i_var[29] = (_i_var[22])-(_i_var[10]);
	_i_var[30] = (_i_var[25])*(_i_var[24]);
	_i_var[31] = (_i_var[26])*(_i_var[26]);
	_i_var[32] = 1;
	_i_var[33] = (_i_var[27])*(_i_var[27]);
	_i_var[34] = -(_i_var[28]);
	_i_var[35] = (_i_var[23])*(_i_var[29]);
	_i_var[36] = (_i_var[30])*(_i_var[10]);
	_i_var[37] = (_i_var[32])/(_i_var[31]);
	_i_var[38] = (_i_var[19])/(_i_var[10]);
	_i_var[39] = (_i_var[32])/(_i_var[33]);
	_i_var[40] = (_i_var[35])*(_i_var[34]);
	_i_var[41] = -2;
	_i_var[42] = (_i_var[23])*(_i_var[36]);
	_i_var[43] = (_i_var[29])*(_i_var[29]);
	_i_var[44] = -(_i_var[37]);
	_i_var[45] = (_i_var[38])*(_i_var[23]);
	_i_var[46] = -(_i_var[39]);
	_i_var[47] = (_i_var[38])*(_i_var[35]);
	_i_var[48] = (_i_var[41])*(_i_var[40]);
	_i_var[49] = (_i_var[43])*(_i_var[42]);
	_i_var[50] = (_i_var[32])/(_i_var[26]);
	_i_var[51] = (_i_var[44])*(_i_var[23]);
	_i_var[52] = (_i_var[25])*(_i_var[45]);
	_i_var[53] = (_i_var[32])/(_i_var[27]);
	_i_var[54] = (_i_var[46])*(_i_var[23]);
	_i_var[55] = (_i_var[47])*(_i_var[25]);
	_i_var[56] = (_i_var[43])*(_i_var[34]);
	_i_var[57] = (_i_var[49])+(_i_var[48]);
	_i_var[58] = (_i_var[51])*(_i_var[50]);
	_i_var[59] = (_i_var[50])*(_i_var[50]);
	_i_var[60] = (_i_var[40])+(_i_var[52]);
	_i_var[61] = (_i_var[54])*(_i_var[53]);
	_i_var[62] = (_i_var[56])+(_i_var[55]);
	_i_var[63] = (_i_var[57])+(_i_var[45]);
	_i_var[64] = (_i_var[53])*(_i_var[53]);
	_i_var[65] = (_i_var[47])*(_i_var[58]);
	_i_var[66] = (_i_var[59])*(_i_var[45]);
	_i_var[67] = (_i_var[50])*(_i_var[60]);
	_i_var[68] = (_i_var[62])*(_i_var[61]);
	_i_var[69] = (_i_var[64])*(_i_var[63]);
	_i_var[70] = (_i_var[66])+(_i_var[65]);
	_i_var[71] = (_i_var[23])*(_i_var[9]);
	_i_var[72] = (_i_var[23])*(_i_var[11]);
	_i_var[73] = (_i_var[53])*(_i_var[67]);
	_i_var[74] = (_i_var[23])*(_i_var[2]);
	_i_var[75] = (_i_var[23])*(_i_var[8]);
	_i_var[76] = (_i_var[69])+(_i_var[68]);
	_i_var[77] = (_i_var[23])*(_i_var[1]);
	_i_var[78] = (_i_var[23])*(_i_var[0]);
	_i_var[79] = (_i_var[71])*(_i_var[70]);
	_i_var[80] = (_i_var[72])*(_i_var[70]);
	_i_var[81] = (_i_var[47])*(_i_var[50]);
	_i_var[82] = (_i_var[71])*(_i_var[71]);
	_i_var[83] = (_i_var[71])*(_i_var[73]);
	_i_var[84] = (_i_var[74])*(_i_var[73]);
	_i_var[85] = (_i_var[75])*(_i_var[75]);
	_i_var[86] = (_i_var[75])*(_i_var[73]);
	_i_var[87] = (_i_var[72])*(_i_var[72]);
	_i_var[88] = (_i_var[72])*(_i_var[73]);
	_i_var[89] = (_i_var[77])*(_i_var[76]);
	_i_var[90] = (_i_var[74])*(_i_var[76]);
	_i_var[91] = (_i_var[62])*(_i_var[53]);
	_i_var[92] = (_i_var[77])*(_i_var[77]);
	_i_var[93] = (_i_var[78])*(_i_var[78]);
	_i_var[94] = (_i_var[74])*(_i_var[74]);
	_i_var[95] = (_i_var[75])*(_i_var[79]);
	_i_var[96] = (_i_var[71])*(_i_var[80]);
	_i_var[97] = (_i_var[81])*(_i_var[23]);
	_i_var[98] = (_i_var[82])*(_i_var[70]);
	_i_var[99] = (_i_var[77])*(_i_var[83]);
	_i_var[100] = (_i_var[78])*(_i_var[83]);
	_i_var[101] = (_i_var[71])*(_i_var[84]);
	_i_var[102] = (_i_var[75])*(_i_var[80]);
	_i_var[103] = (_i_var[85])*(_i_var[70]);
	_i_var[104] = (_i_var[77])*(_i_var[86]);
	_i_var[105] = (_i_var[78])*(_i_var[86]);
	_i_var[106] = (_i_var[75])*(_i_var[84]);
	_i_var[107] = (_i_var[87])*(_i_var[70]);
	_i_var[108] = (_i_var[25])*(_i_var[88]);
	_i_var[109] = (_i_var[74])*(_i_var[88]);
	_i_var[110] = (_i_var[78])*(_i_var[89]);
	_i_var[111] = (_i_var[77])*(_i_var[90]);
	_i_var[112] = (_i_var[91])*(_i_var[23]);
	_i_var[113] = (_i_var[92])*(_i_var[76]);
	_i_var[114] = (_i_var[78])*(_i_var[90]);
	_i_var[115] = (_i_var[93])*(_i_var[76]);
	_i_var[116] = (_i_var[94])*(_i_var[76]);
	_i_var[117] = (_i_var[25])*(_i_var[95]);
	_i_var[118] = (_i_var[25])*(_i_var[96]);
	_i_var[119] = (_i_var[98])+(_i_var[97]);
	_i_var[120] = (_i_var[25])*(_i_var[99]);
	_i_var[121] = (_i_var[25])*(_i_var[100]);
	_i_var[122] = (_i_var[25])*(_i_var[101]);
	_i_var[123] = (_i_var[25])*(_i_var[102]);
	_i_var[124] = (_i_var[103])+(_i_var[97]);
	_i_var[125] = (_i_var[25])*(_i_var[104]);
	_i_var[126] = (_i_var[25])*(_i_var[105]);
	_i_var[127] = (_i_var[25])*(_i_var[106]);
	_i_var[128] = (_i_var[107])+(_i_var[97]);
	_i_var[129] = (_i_var[77])*(_i_var[108]);
	_i_var[130] = (_i_var[78])*(_i_var[108]);
	_i_var[131] = (_i_var[25])*(_i_var[109]);
	_i_var[132] = (_i_var[77])*(_i_var[88]);
	_i_var[133] = (_i_var[78])*(_i_var[88]);
	_i_var[134] = (_i_var[25])*(_i_var[110]);
	_i_var[135] = (_i_var[25])*(_i_var[111]);
	_i_var[136] = (_i_var[113])+(_i_var[112]);
	_i_var[137] = (_i_var[25])*(_i_var[114]);
	_i_var[138] = (_i_var[115])+(_i_var[112]);
	_i_var[139] = (_i_var[116])+(_i_var[112]);
	_i_var[140] = (_i_var[25])*(_i_var[117]);
	_i_var[141] = (_i_var[25])*(_i_var[118]);
	_i_var[142] = (_i_var[25])*(_i_var[119]);
	_i_var[143] = (_i_var[25])*(_i_var[120]);
	_i_var[144] = (_i_var[25])*(_i_var[121]);
	_i_var[145] = (_i_var[25])*(_i_var[122]);
	_i_var[146] = (_i_var[25])*(_i_var[123]);
	_i_var[147] = (_i_var[25])*(_i_var[124]);
	_i_var[148] = (_i_var[25])*(_i_var[125]);
	_i_var[149] = (_i_var[25])*(_i_var[126]);
	_i_var[150] = (_i_var[25])*(_i_var[127]);
	_i_var[151] = (_i_var[25])*(_i_var[128]);
	_i_var[152] = (_i_var[25])*(_i_var[129]);
	_i_var[153] = (_i_var[25])*(_i_var[130]);
	_i_var[154] = (_i_var[25])*(_i_var[131]);
	_i_var[155] = (_i_var[25])*(_i_var[132]);
	_i_var[156] = (_i_var[25])*(_i_var[133]);
	_i_var[157] = (_i_var[25])*(_i_var[134]);
	_i_var[158] = (_i_var[25])*(_i_var[135]);
	_i_var[159] = (_i_var[25])*(_i_var[136]);
	_i_var[160] = (_i_var[25])*(_i_var[137]);
	_i_var[161] = (_i_var[25])*(_i_var[138]);
	_i_var[162] = (_i_var[25])*(_i_var[139]);
	energyhessian(0,0) = _i_var[119];
	energyhessian(1,0) = _i_var[140];
	energyhessian(2,0) = _i_var[141];
	energyhessian(3,0) = _i_var[142];
	energyhessian(4,0) = _i_var[117];
	energyhessian(5,0) = _i_var[118];
	energyhessian(6,0) = _i_var[143];
	energyhessian(7,0) = _i_var[144];
	energyhessian(8,0) = _i_var[145];
	energyhessian(9,0) = _i_var[120];
	energyhessian(10,0) = _i_var[121];
	energyhessian(11,0) = _i_var[122];
	energyhessian(0,1) = _i_var[140];
	energyhessian(1,1) = _i_var[124];
	energyhessian(2,1) = _i_var[146];
	energyhessian(3,1) = _i_var[117];
	energyhessian(4,1) = _i_var[147];
	energyhessian(5,1) = _i_var[123];
	energyhessian(6,1) = _i_var[148];
	energyhessian(7,1) = _i_var[149];
	energyhessian(8,1) = _i_var[150];
	energyhessian(9,1) = _i_var[125];
	energyhessian(10,1) = _i_var[126];
	energyhessian(11,1) = _i_var[127];
	energyhessian(0,2) = _i_var[141];
	energyhessian(1,2) = _i_var[146];
	energyhessian(2,2) = _i_var[128];
	energyhessian(3,2) = _i_var[118];
	energyhessian(4,2) = _i_var[123];
	energyhessian(5,2) = _i_var[151];
	energyhessian(6,2) = _i_var[152];
	energyhessian(7,2) = _i_var[153];
	energyhessian(8,2) = _i_var[154];
	energyhessian(9,2) = _i_var[129];
	energyhessian(10,2) = _i_var[130];
	energyhessian(11,2) = _i_var[131];
	energyhessian(0,3) = _i_var[142];
	energyhessian(1,3) = _i_var[117];
	energyhessian(2,3) = _i_var[118];
	energyhessian(3,3) = _i_var[119];
	energyhessian(4,3) = _i_var[95];
	energyhessian(5,3) = _i_var[96];
	energyhessian(6,3) = _i_var[120];
	energyhessian(7,3) = _i_var[121];
	energyhessian(8,3) = _i_var[122];
	energyhessian(9,3) = _i_var[99];
	energyhessian(10,3) = _i_var[100];
	energyhessian(11,3) = _i_var[101];
	energyhessian(0,4) = _i_var[117];
	energyhessian(1,4) = _i_var[147];
	energyhessian(2,4) = _i_var[123];
	energyhessian(3,4) = _i_var[95];
	energyhessian(4,4) = _i_var[124];
	energyhessian(5,4) = _i_var[102];
	energyhessian(6,4) = _i_var[125];
	energyhessian(7,4) = _i_var[126];
	energyhessian(8,4) = _i_var[127];
	energyhessian(9,4) = _i_var[104];
	energyhessian(10,4) = _i_var[105];
	energyhessian(11,4) = _i_var[106];
	energyhessian(0,5) = _i_var[118];
	energyhessian(1,5) = _i_var[123];
	energyhessian(2,5) = _i_var[151];
	energyhessian(3,5) = _i_var[96];
	energyhessian(4,5) = _i_var[102];
	energyhessian(5,5) = _i_var[128];
	energyhessian(6,5) = _i_var[155];
	energyhessian(7,5) = _i_var[156];
	energyhessian(8,5) = _i_var[131];
	energyhessian(9,5) = _i_var[132];
	energyhessian(10,5) = _i_var[133];
	energyhessian(11,5) = _i_var[109];
	energyhessian(0,6) = _i_var[143];
	energyhessian(1,6) = _i_var[148];
	energyhessian(2,6) = _i_var[152];
	energyhessian(3,6) = _i_var[120];
	energyhessian(4,6) = _i_var[125];
	energyhessian(5,6) = _i_var[155];
	energyhessian(6,6) = _i_var[136];
	energyhessian(7,6) = _i_var[157];
	energyhessian(8,6) = _i_var[158];
	energyhessian(9,6) = _i_var[159];
	energyhessian(10,6) = _i_var[134];
	energyhessian(11,6) = _i_var[135];
	energyhessian(0,7) = _i_var[144];
	energyhessian(1,7) = _i_var[149];
	energyhessian(2,7) = _i_var[153];
	energyhessian(3,7) = _i_var[121];
	energyhessian(4,7) = _i_var[126];
	energyhessian(5,7) = _i_var[156];
	energyhessian(6,7) = _i_var[157];
	energyhessian(7,7) = _i_var[138];
	energyhessian(8,7) = _i_var[160];
	energyhessian(9,7) = _i_var[134];
	energyhessian(10,7) = _i_var[161];
	energyhessian(11,7) = _i_var[137];
	energyhessian(0,8) = _i_var[145];
	energyhessian(1,8) = _i_var[150];
	energyhessian(2,8) = _i_var[154];
	energyhessian(3,8) = _i_var[122];
	energyhessian(4,8) = _i_var[127];
	energyhessian(5,8) = _i_var[131];
	energyhessian(6,8) = _i_var[158];
	energyhessian(7,8) = _i_var[160];
	energyhessian(8,8) = _i_var[139];
	energyhessian(9,8) = _i_var[135];
	energyhessian(10,8) = _i_var[137];
	energyhessian(11,8) = _i_var[162];
	energyhessian(0,9) = _i_var[120];
	energyhessian(1,9) = _i_var[125];
	energyhessian(2,9) = _i_var[129];
	energyhessian(3,9) = _i_var[99];
	energyhessian(4,9) = _i_var[104];
	energyhessian(5,9) = _i_var[132];
	energyhessian(6,9) = _i_var[159];
	energyhessian(7,9) = _i_var[134];
	energyhessian(8,9) = _i_var[135];
	energyhessian(9,9) = _i_var[136];
	energyhessian(10,9) = _i_var[110];
	energyhessian(11,9) = _i_var[111];
	energyhessian(0,10) = _i_var[121];
	energyhessian(1,10) = _i_var[126];
	energyhessian(2,10) = _i_var[130];
	energyhessian(3,10) = _i_var[100];
	energyhessian(4,10) = _i_var[105];
	energyhessian(5,10) = _i_var[133];
	energyhessian(6,10) = _i_var[134];
	energyhessian(7,10) = _i_var[161];
	energyhessian(8,10) = _i_var[137];
	energyhessian(9,10) = _i_var[110];
	energyhessian(10,10) = _i_var[138];
	energyhessian(11,10) = _i_var[114];
	energyhessian(0,11) = _i_var[122];
	energyhessian(1,11) = _i_var[127];
	energyhessian(2,11) = _i_var[131];
	energyhessian(3,11) = _i_var[101];
	energyhessian(4,11) = _i_var[106];
	energyhessian(5,11) = _i_var[109];
	energyhessian(6,11) = _i_var[135];
	energyhessian(7,11) = _i_var[137];
	energyhessian(8,11) = _i_var[162];
	energyhessian(9,11) = _i_var[111];
	energyhessian(10,11) = _i_var[114];
	energyhessian(11,11) = _i_var[139];
}
*/

template <class T>
T stretchingEnergyLocal(T ks, const Matrix<T,3,1> & X1, const Matrix<T,3,1> & X2, const Matrix<T,3,1> & x1, const Matrix<T,3,1> & x2)
{

	T q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	T p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	T t4 = pow(p[3] - p[0], 0.2e1);
	T t8 = pow(p[4] - p[1], 0.2e1);
	T t12 = pow(p[5] - p[2], 0.2e1);
	T t16 = pow(q[3] - q[0], 0.2e1);
	T t20 = pow(q[4] - q[1], 0.2e1);
	T t24 = pow(q[5] - q[2], 0.2e1);
	T t26 = pow(-t4 - t8 - t12 + t16 + t20 + t24, 0.2e1);
	T t28 = t4 + t8 + t12;
	T t29 = sqrt(t28);
	return 0.1250000000e0 / t29 / t28 * t26 * ks;
}
    
template <class T>
void computeEoLRodStretchingEnergyGradient(double ks, const Matrix<T, 3, 1> & X1, const Matrix<T, 3, 1> & X2, const Matrix<T, 3, 1> & x1, const Matrix<T, 3, 1> & x2, 
	Matrix<T, 12, 1>& energygradient){

	T q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	T p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	T t1 = p[0] - p[3];
	T t2 = p[1] - p[4];
	T t3 = p[2] - p[5];
	T t4 = q[0] - q[3];
	T t5 = q[1] - q[4];
	T t6 = q[2] - q[5];
	T t7 = pow(t3, 0.2e1);
	T t8 = pow(t1, 0.2e1);
	T t9 = pow(t2, 0.2e1);
	T t10 = -pow(t4, 0.2e1) - pow(t5, 0.2e1) - pow(t6, 0.2e1) + t7 + t8 + t9;
	t7 = t8 + t9 + t7;
	t8 = pow(t7, -0.5e1 / 0.2e1);
	t7 = t7 * t8 / 0.2e1;
	t8 = t7 - 0.3750000000e0 * t10 * t8;
	t9 = ks * t10;
	t1 = t9 * t1 * t8;
	t2 = t9 * t2 * t8;
	t3 = t9 * t3 * t8;
	t7 = t7 * t9;
	t6 = t7 * t6;
	t4 = t7 * t4;
	t5 = t7 * t5;
	energygradient[0] = -t4;
	energygradient[1] = -t5;
	energygradient[2] = -t6;
	energygradient[3] = t4;
	energygradient[4] = t5;
	energygradient[5] = t6;
	energygradient[6] = t1;
	energygradient[7] = t2;
	energygradient[8] = t3;
	energygradient[9] = -t1;
	energygradient[10] = -t2;
	energygradient[11] = -t3;

}	

template <class T>
void computeEoLRodStretchingEnergyHessian(double ks, const Matrix<T, 3, 1> & X1, const Matrix<T, 3, 1> & X2, const Matrix<T, 3, 1> & x1, const Matrix<T, 3, 1> & x2, 
	Matrix<T, 12, 12>& energyhessian){
	T q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	T p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	T t1 = q[0] - q[3];
	T t2 = p[0] - p[3];
	T t3 = p[1] - p[4];
	T t4 = p[2] - p[5];
	T t5 = pow(t2, 0.2e1);
	T t6 = pow(t4, 0.2e1);
	T t7 = pow(t3, 0.2e1);
	T t8 = t6 + t7 + t5;
	T t9 = pow(t8, -0.7e1 / 0.2e1);
	T t10 = pow(t8, 0.2e1) * t9;
	T t11 = q[1] - q[4];
	T t12 = q[2] - q[5];
	T t13 = pow(t12, 0.2e1);
	T t14 = pow(t1, 0.2e1);
	T t15 = pow(t11, 0.2e1);
	T t16 = t6 + t7 - t13 - t14 - t15 + t5;
	T t17 = t16 / 0.2e1;
	T t18 = ks * t10;
	t14 = t18 * (-t17 + t14);
	T t19 = -t14;
	t8 = t8 * t9;
	T t20 = -t10 + 0.3e1 / 0.2e1 * t16 * t8;
	t2 = ks * t2;
	T t21 = t2 * t1 * t20;
	T t22 = ks * t3;
	T t23 = t22 * t1 * t20;
	T t24 = ks * t4;
	T t25 = t24 * t1 * t20;
	T t26 = -t21;
	T t27 = -t23;
	T t28 = -t25;
	T t29 = t18 * t11 * t1;
	T t30 = t18 * t12;
	t1 = t30 * t1;
	t15 = t18 * (-t17 + t15);
	T t31 = -t15;
	T t32 = t2 * t11 * t20;
	T t33 = t22 * t11 * t20;
	T t34 = t24 * t11 * t20;
	T t35 = -t32;
	T t36 = -t33;
	T t37 = -t34;
	t11 = t30 * t11;
	t13 = t18 * (-t17 + t13);
	t18 = -t13;
	t30 = t2 * t12 * t20;
	T t38 = t22 * t12 * t20;
	t12 = t24 * t12 * t20;
	t20 = -t30;
	t24 = -t38;
	T t39 = -t12;
	T t40 = -t21;
	T t41 = -t23;
	T t42 = -t25;
	T t43 = -t32;
	T t44 = -t33;
	T t45 = -t34;
	T t46 = -t30;
	T t47 = -t38;
	T t48 = -t12;
	T t49 = -0.3e1 / 0.8e1 * t16;
	T t50 = 0.1875000000e1 * pow(t16, 0.2e1) * t9;
	t5 = ks * (t10 * (t17 + t5) + t50 * t5 + t16 * (-0.3e1 * t5 + t49) * t8);
	t9 = t16 * (-0.3e1 * t8 + 0.1875000000e1 * t9 * t16) + t10;
	t3 = t2 * t3 * t9;
	t2 = t2 * t4 * t9;
	T t51 = 0.1000000000e1 * t5;
	T t52 = -t51;
	T t53 = -t3;
	T t54 = -t2;
	t7 = ks * (t10 * (t17 + t7) + t50 * t7 + t16 * (-0.3e1 * t7 + t49) * t8);
	t4 = t22 * t4 * t9;
	t9 = -t3;
	t22 = -t7;
	T t55 = -t4;
	t6 = ks * (t10 * (t17 + t6) + t50 * t6 + t16 * (-0.3e1 * t6 + t49) * t8);
	t8 = -t2;
	t10 = -t4;
	t16 = -t6;
	std::vector<Vector<T,12>> hessian(12);
	hessian[0][0] = t14;
	hessian[0][1] = t29;
	hessian[0][2] = t1;
	hessian[0][3] = t19;
	hessian[0][4] = -t29;
	hessian[0][5] = -t1;
	hessian[0][6] = t21;
	hessian[0][7] = t23;
	hessian[0][8] = t25;
	hessian[0][9] = t26;
	hessian[0][10] = t27;
	hessian[0][11] = t28;
	hessian[1][0] = t29;
	hessian[1][1] = t15;
	hessian[1][2] = t11;
	hessian[1][3] = -t29;
	hessian[1][4] = t31;
	hessian[1][5] = -t11;
	hessian[1][6] = t32;
	hessian[1][7] = t33;
	hessian[1][8] = t34;
	hessian[1][9] = t35;
	hessian[1][10] = t36;
	hessian[1][11] = t37;
	hessian[2][0] = t1;
	hessian[2][1] = t11;
	hessian[2][2] = t13;
	hessian[2][3] = -t1;
	hessian[2][4] = -t11;
	hessian[2][5] = t18;
	hessian[2][6] = t30;
	hessian[2][7] = t38;
	hessian[2][8] = t12;
	hessian[2][9] = t20;
	hessian[2][10] = t24;
	hessian[2][11] = t39;
	hessian[3][0] = t19;
	hessian[3][1] = -t29;
	hessian[3][2] = -t1;
	hessian[3][3] = t14;
	hessian[3][4] = t29;
	hessian[3][5] = t1;
	hessian[3][6] = t40;
	hessian[3][7] = t41;
	hessian[3][8] = t42;
	hessian[3][9] = t21;
	hessian[3][10] = t23;
	hessian[3][11] = t25;
	hessian[4][0] = -t29;
	hessian[4][1] = t31;
	hessian[4][2] = -t11;
	hessian[4][3] = t29;
	hessian[4][4] = t15;
	hessian[4][5] = t11;
	hessian[4][6] = t43;
	hessian[4][7] = t44;
	hessian[4][8] = t45;
	hessian[4][9] = t32;
	hessian[4][10] = t33;
	hessian[4][11] = t34;
	hessian[5][0] = -t1;
	hessian[5][1] = -t11;
	hessian[5][2] = t18;
	hessian[5][3] = t1;
	hessian[5][4] = t11;
	hessian[5][5] = t13;
	hessian[5][6] = t46;
	hessian[5][7] = t47;
	hessian[5][8] = t48;
	hessian[5][9] = t30;
	hessian[5][10] = t38;
	hessian[5][11] = t12;
	hessian[6][0] = t21;
	hessian[6][1] = t32;
	hessian[6][2] = t30;
	hessian[6][3] = t40;
	hessian[6][4] = t43;
	hessian[6][5] = t46;
	hessian[6][6] = t5;
	hessian[6][7] = t3;
	hessian[6][8] = t2;
	hessian[6][9] = t52;
	hessian[6][10] = t53;
	hessian[6][11] = t54;
	hessian[7][0] = t23;
	hessian[7][1] = t33;
	hessian[7][2] = t38;
	hessian[7][3] = t41;
	hessian[7][4] = t44;
	hessian[7][5] = t47;
	hessian[7][6] = t3;
	hessian[7][7] = t7;
	hessian[7][8] = t4;
	hessian[7][9] = t9;
	hessian[7][10] = t22;
	hessian[7][11] = t55;
	hessian[8][0] = t25;
	hessian[8][1] = t34;
	hessian[8][2] = t12;
	hessian[8][3] = t42;
	hessian[8][4] = t45;
	hessian[8][5] = t48;
	hessian[8][6] = t2;
	hessian[8][7] = t4;
	hessian[8][8] = t6;
	hessian[8][9] = t8;
	hessian[8][10] = t10;
	hessian[8][11] = t16;
	hessian[9][0] = t26;
	hessian[9][1] = t35;
	hessian[9][2] = t20;
	hessian[9][3] = t21;
	hessian[9][4] = t32;
	hessian[9][5] = t30;
	hessian[9][6] = t52;
	hessian[9][7] = t9;
	hessian[9][8] = t8;
	hessian[9][9] = t51;
	hessian[9][10] = t3;
	hessian[9][11] = t2;
	hessian[10][0] = t27;
	hessian[10][1] = t36;
	hessian[10][2] = t24;
	hessian[10][3] = t23;
	hessian[10][4] = t33;
	hessian[10][5] = t38;
	hessian[10][6] = t53;
	hessian[10][7] = t22;
	hessian[10][8] = t10;
	hessian[10][9] = t3;
	hessian[10][10] = t7;
	hessian[10][11] = t4;
	hessian[11][0] = t28;
	hessian[11][1] = t37;
	hessian[11][2] = t39;
	hessian[11][3] = t25;
	hessian[11][4] = t34;
	hessian[11][5] = t12;
	hessian[11][6] = t54;
	hessian[11][7] = t55;
	hessian[11][8] = t16;
	hessian[11][9] = t2;
	hessian[11][10] = t4;
	hessian[11][11] = t6;
	for(int i = 0; i < 12; ++i){
		energyhessian.col(i) = hessian[i];
	}
}

#endif
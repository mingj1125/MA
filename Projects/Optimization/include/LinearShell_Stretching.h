#ifndef LINEAR_SHELL_STRETCHING_H
#define LINEAR_SHELL_STRETCHING_H

#include "vector_manipulation.h"

AScalar PlanarStVenantKirchhoffEnergyImpl_(Vector9a& q, Vector6a& p, AScalar h, AScalar lambda, AScalar mu)
{
	AScalar energy;

	AScalar t1 = q[3];
	AScalar t2 = q[6];
	AScalar t3 = -t1 + t2;
	AScalar t4 = p[1];
	AScalar t6 = q[0];
	AScalar t7 = -t2 + t6;
	AScalar t8 = p[3];
	AScalar t10 = p[5];
	AScalar t11 = -t1 + t6;
	AScalar t13 = -t11 * t10 + t4 * t3 + t8 * t7;
	AScalar t14 = t13 * t13;
	AScalar t15 = p[2];
	AScalar t16 = p[4];
	AScalar t19 = p[0];
	AScalar t20 = -t16 + t19;
	AScalar t22 = -t15 + t19;
	AScalar t24 = t4 * (-t15 + t16) + t8 * t20 - t22 * t10;
	AScalar t25 = t24 * t24;
	AScalar t26 = 0.1e1 / t25;
	AScalar t28 = 0.5e0 * t26 * t14;
	AScalar t29 = q[4];
	AScalar t30 = q[7];
	AScalar t31 = -t29 + t30;
	AScalar t33 = q[1];
	AScalar t34 = -t30 + t33;
	AScalar t36 = -t29 + t33;
	AScalar t38 = -t36 * t10 + t4 * t31 + t8 * t34;
	AScalar t39 = t38 * t38;
	AScalar t41 = 0.5e0 * t26 * t39;
	AScalar t42 = q[5];
	AScalar t43 = q[8];
	AScalar t44 = -t42 + t43;
	AScalar t46 = q[2];
	AScalar t47 = -t43 + t46;
	AScalar t49 = -t42 + t46;
	AScalar t51 = -t49 * t10 + t4 * t44 + t8 * t47;
	AScalar t52 = t51 * t51;
	AScalar t54 = 0.5e0 * t26 * t52;
	AScalar t60 = t11 * t16 - t15 * t7 - t19 * t3;
	AScalar t61 = t60 * t60;
	AScalar t64 = t10 - t4;
	AScalar t66 = -t8 + t4;
	AScalar t68 = t19 * (t8 - t10) + t15 * t64 + t66 * t16;
	AScalar t69 = t68 * t68;
	AScalar t70 = 0.1e1 / t69;
	AScalar t72 = 0.5e0 * t70 * t61;
	AScalar t78 = -t15 * t34 + t36 * t16 - t19 * t31;
	AScalar t79 = t78 * t78;
	AScalar t81 = 0.5e0 * t70 * t79;
	AScalar t87 = -t15 * t47 + t49 * t16 - t19 * t44;
	AScalar t88 = t87 * t87;
	AScalar t90 = 0.5e0 * t70 * t88;
	AScalar t92 = pow(t28 + t41 + t54 - 0.10e1 + t72 + t81 + t90, 0.2e1);
	AScalar t96 = pow(t28 + t41 + t54 - 0.5e0, 0.2e1);
	AScalar t97 = 0.1e1 / t24;
	AScalar t99 = 0.1e1 / t68;
	AScalar t112 = pow(0.5e0 * t99 * t60 * t97 * t13 + 0.5e0 * t99 * t78 * t97 * t38 + 0.5e0 * t99 * t87 * t97 * t51, 0.2e1);
	AScalar t115 = pow(t72 + t81 + t90 - 0.5e0, 0.2e1);
	energy = (-t66 * t20 / 0.2e1 - t64 * t22 / 0.2e1) * (0.5e0 * t92 * lambda + (t96 + 0.2e1 * t112 + t115) * mu);

	return h*energy;
}

Vector9a PlanarStVenantKirchhoffGradientImpl_(Vector9a& q, Vector6a& p, AScalar h, AScalar lambda, AScalar mu)
{
	Vector9a gradient;

	AScalar t1 = q[3] - q[6];
	AScalar t2 = -q[6] + q[0];
	AScalar t3 = q[3] - q[0];
	AScalar t4 = t1 * p[1] - t2 * p[3] - t3 * p[5];
	AScalar t5 = p[2] - p[4];
	AScalar t6 = -p[4] + p[0];
	AScalar t7 = p[2] - p[0];
	AScalar t8 = t5 * p[1] - t6 * p[3] - t7 * p[5];
	AScalar t9 = q[4] - q[7];
	AScalar t10 = -q[7] + q[1];
	AScalar t11 = q[4] - q[1];
	AScalar t12 = -t10 * p[3] - t11 * p[5] + t9 * p[1];
	AScalar t13 = q[5] - q[8];
	AScalar t14 = -q[8] + q[2];
	AScalar t15 = q[5] - q[2];
	AScalar t16 = t13 * p[1] - t14 * p[3] - t15 * p[5];
	t1 = t1 * p[0] - t2 * p[2] - t3 * p[4];
	t2 = p[3] - p[5];
	t3 = -p[5] + p[1];
	AScalar t17 = p[3] - p[1];
	AScalar t18 = -t17 * p[4] + t2 * p[0] - t3 * p[2];
	t9 = -t10 * p[2] - t11 * p[4] + t9 * p[0];
	t10 = t13 * p[0] - t14 * p[2] - t15 * p[4];
	t8 = 0.1e1 / t8;
	t11 = 0.1e1 / t18;
	t13 = pow(t8, 0.2e1);
	t14 = pow(t11, 0.2e1);
	t15 = (pow(t12, 0.2e1) + pow(t16, 0.2e1) + pow(t4, 0.2e1)) * t13;
	t18 = (pow(t1, 0.2e1) + pow(t10, 0.2e1) + pow(t9, 0.2e1)) * t14;
	AScalar t19 = 0.1e1 / 0.2e1;
	AScalar t20 = t1 * t14;
	AScalar t21 = t20 * t5;
	AScalar t22 = t4 * t13;
	AScalar t23 = t22 * t2;
	AScalar t24 = 0.1e1 - t15;
	t8 = t8 * t11;
	t11 = t8 * (t1 * t4 + t10 * t16 + t12 * t9);
	AScalar t25 = 0.1e1 - t18;
	t15 = lambda * (t19 * (t15 + t18) - 0.1e1);
	t18 = -t17 * t6 + t3 * t7;
	AScalar t26 = t12 * t13;
	AScalar t27 = t26 * t2;
	AScalar t28 = t9 * t14;
	AScalar t29 = t28 * t5;
	t13 = t16 * t13;
	AScalar t30 = t13 * t2;
	t14 = t10 * t14;
	AScalar t31 = t14 * t5;
	AScalar t32 = t22 * t3;
	AScalar t33 = t20 * t6;
	AScalar t34 = t26 * t3;
	AScalar t35 = t28 * t6;
	AScalar t36 = t13 * t3;
	AScalar t37 = t14 * t6;
	t22 = t22 * t17;
	t20 = t20 * t7;
	t26 = t26 * t17;
	t28 = t28 * t7;
	t13 = t13 * t17;
	t14 = t14 * t7;
	t30 = t19 * (-mu * (-t11 * t8 * (t10 * t2 + t16 * t5) + t31 * t25 + t30 * t24) + t15 * (t30 + t31)) * t18;
	t27 = t19 * (-mu * (-t11 * t8 * (t12 * t5 + t2 * t9) + t29 * t25 + t27 * t24) + t15 * (t27 + t29)) * t18;
	t2 = t19 * (-mu * (-t11 * t8 * (t1 * t2 + t4 * t5) + t21 * t25 + t23 * t24) + t15 * (t21 + t23)) * t18;
	gradient[0] = t2;
	gradient[1] = t27;
	gradient[2] = t30;
	gradient[3] = -t19 * (-mu * (-t11 * t8 * (t1 * t3 + t4 * t6) + t33 * t25 + t32 * t24) + t15 * (t32 + t33)) * t18;
	gradient[4] = -t19 * (mu * (t11 * t8 * (t12 * t6 + t3 * t9) - t35 * t25 - t34 * t24) + t15 * (t34 + t35)) * t18;
	gradient[5] = -t19 * (mu * (t11 * t8 * (t10 * t3 + t16 * t6) - t37 * t25 - t36 * t24) + t15 * (t36 + t37)) * t18;
	gradient[6] = -t19 * (mu * (t11 * t8 * (t1 * t17 + t4 * t7) - t20 * t25 - t22 * t24) + t15 * (t22 + t20)) * t18;
	gradient[7] = -t19 * (mu * (t11 * t8 * (t12 * t7 + t17 * t9) - t28 * t25 - t26 * t24) + t15 * (t26 + t28)) * t18;
	gradient[8] = -t19 * (-mu * (-t11 * t8 * (t10 * t17 + t16 * t7) + t13 * t24 + t14 * t25) + t15 * (t13 + t14)) * t18;


	return h*gradient;
}

Matrix9a PlanarStVenantKirchhoffHessianImpl_(Vector9a& q, Vector6a& p, AScalar h, AScalar lambda, AScalar mu)
{
	AScalar hessian[81];

	AScalar t1 = q[3] - q[6];
	AScalar t2 = -q[6] + q[0];
	AScalar t3 = q[3] - q[0];
	AScalar t4 = t1 * p[1] - t2 * p[3] - t3 * p[5];
	AScalar t5 = p[2] - p[4];
	AScalar t6 = -p[4] + p[0];
	AScalar t7 = p[2] - p[0];
	AScalar t8 = t5 * p[1] - t6 * p[3] - t7 * p[5];
	AScalar t9 = p[3] - p[5];
	t1 = t1 * p[0] - t2 * p[2] - t3 * p[4];
	t2 = -p[5] + p[1];
	t3 = p[3] - p[1];
	AScalar t10 = -t2 * p[2] - t3 * p[4] + t9 * p[0];
	t8 = 0.1e1 / t8;
	t10 = 0.1e1 / t10;
	AScalar t11 = pow(t8, 0.2e1);
	AScalar t12 = pow(t11, 0.2e1);
	AScalar t13 = pow(t10, 0.2e1);
	AScalar t14 = pow(t13, 0.2e1);
	AScalar t15 = t1 * t13;
	AScalar t16 = t4 * t11;
	AScalar t17 = t15 * t5 + t16 * t9;
	AScalar t18 = q[4] - q[7];
	AScalar t19 = -q[7] + q[1];
	AScalar t20 = q[4] - q[1];
	AScalar t21 = t18 * p[1] - t19 * p[3] - t20 * p[5];
	AScalar t22 = q[5] - q[8];
	AScalar t23 = -q[8] + q[2];
	AScalar t24 = q[5] - q[2];
	AScalar t25 = t22 * p[1] - t23 * p[3] - t24 * p[5];
	t18 = t18 * p[0] - t19 * p[2] - t20 * p[4];
	t19 = t22 * p[0] - t23 * p[2] - t24 * p[4];
	t20 = pow(t1, 0.2e1);
	t22 = pow(t19, 0.2e1);
	t23 = pow(t18, 0.2e1);
	t24 = pow(t25, 0.2e1);
	AScalar t26 = pow(t21, 0.2e1);
	AScalar t27 = pow(t4, 0.2e1);
	AScalar t28 = (t24 + t26 + t27) * t11;
	AScalar t29 = (t20 + t22 + t23) * t13;
	AScalar t30 = 0.1e1 / 0.2e1;
	AScalar t31 = t30 * (t28 + t29) - 0.1e1;
	AScalar t32 = pow(t5, 0.2e1);
	AScalar t33 = pow(t9, 0.2e1);
	AScalar t34 = t33 * t11;
	AScalar t35 = t32 * t13;
	t28 = 0.1e1 - t28;
	t8 = t8 * t10;
	t10 = t8 * (t1 * t9 + t4 * t5);
	AScalar t36 = t8 * (t1 * t4 + t18 * t21 + t19 * t25);
	t29 = 0.1e1 - t29;
	AScalar t37 = t8 * t36;
	AScalar t38 = t37 * t9 * t5;
	t27 = t27 * t12;
	t20 = t20 * t14;
	AScalar t39 = t35 * t29;
	AScalar t40 = t34 * t28;
	AScalar t41 = 0.2e1;
	t34 = t31 * (t34 + t35);
	t35 = t7 * t2;
	AScalar t42 = t6 * t3;
	AScalar t43 = t35 - t42;
	AScalar t44 = t18 * t13;
	AScalar t45 = t21 * t11;
	AScalar t46 = t44 * t5 + t45 * t9;
	AScalar t47 = t8 * (t18 * t9 + t21 * t5);
	AScalar t48 = t21 * t12;
	AScalar t49 = t48 * t33;
	AScalar t50 = t18 * t14;
	AScalar t51 = t50 * t32;
	AScalar t52 = lambda * t46;
	AScalar t53 = t19 * t13;
	AScalar t54 = t25 * t11;
	AScalar t55 = t53 * t5 + t54 * t9;
	AScalar t56 = t8 * (t19 * t9 + t25 * t5);
	AScalar t57 = t25 * t12;
	AScalar t58 = t19 * t14;
	AScalar t59 = lambda * t55;
	AScalar t60 = t15 * t6 + t16 * t2;
	AScalar t61 = t6 * t13;
	AScalar t62 = t61 * t5;
	AScalar t63 = t2 * t11;
	AScalar t64 = t63 * t9;
	AScalar t65 = t8 * (t1 * t2 + t4 * t6);
	AScalar t66 = t20 * t6;
	AScalar t67 = t27 * t2;
	AScalar t68 = t36 * t8 * (t2 * t5 + t6 * t9);
	AScalar t69 = t64 * t28;
	AScalar t70 = t62 * t29;
	t62 = t31 * (t62 + t64);
	t64 = t45 * t2 + t44 * t6;
	AScalar t71 = t8 * (t18 * t2 + t21 * t6);
	AScalar t72 = t50 * t6;
	AScalar t73 = t72 * t1;
	AScalar t74 = t48 * t2;
	AScalar t75 = t74 * t4;
	AScalar t76 = t41 * (t73 * t5 + t75 * t9);
	AScalar t77 = lambda * t64;
	AScalar t78 = t54 * t2 + t53 * t6;
	AScalar t79 = t8 * (t19 * t2 + t25 * t6);
	AScalar t80 = t58 * t6 * t1;
	AScalar t81 = t57 * t2 * t4;
	AScalar t82 = t41 * (t80 * t5 + t81 * t9);
	AScalar t83 = lambda * t78;
	t15 = t15 * t7 + t16 * t3;
	t16 = t7 * t13 * t5;
	AScalar t84 = t3 * t11 * t9;
	AScalar t85 = t8 * (t1 * t3 + t4 * t7);
	AScalar t86 = t36 * t8 * (t3 * t5 + t7 * t9);
	AScalar t87 = t84 * t28;
	AScalar t88 = t16 * t29;
	t16 = t31 * (t16 + t84);
	t44 = t45 * t3 + t44 * t7;
	t18 = t8 * (t18 * t3 + t21 * t7);
	t21 = t50 * t7;
	t45 = t48 * t3;
	t84 = t41 * (t21 * t1 * t5 + t45 * t4 * t9);
	AScalar t89 = lambda * t44;
	t53 = t54 * t3 + t53 * t7;
	t54 = t8 * (t19 * t3 + t25 * t7);
	AScalar t90 = t41 * (t58 * t7 * t1 * t5 + t57 * t3 * t4 * t9);
	AScalar t91 = lambda * t53;
	t26 = t26 * t12;
	t23 = t23 * t14;
	AScalar t92 = t23 * t6;
	AScalar t93 = t26 * t2;
	t72 = t72 * t19;
	t74 = t74 * t25;
	AScalar t94 = t41 * (t72 * t5 + t74 * t9);
	t21 = t41 * (t21 * t19 * t5 + t45 * t25 * t9);
	t12 = t24 * t12;
	t14 = t22 * t14;
	t22 = t14 * t6;
	t24 = t12 * t2;
	t45 = pow(t6, 0.2e1);
	AScalar t95 = pow(t2, 0.2e1);
	AScalar t96 = t45 * t13;
	AScalar t97 = t95 * t11;
	t2 = t37 * t2 * t6;
	t6 = t97 * t28;
	AScalar t98 = t96 * t29;
	t96 = t31 * (t96 + t97);
	t97 = t50 * t45;
	AScalar t99 = t48 * t95;
	t61 = t61 * t7;
	t63 = t63 * t3;
	t8 = t36 * t8 * (t35 + t42);
	t35 = t63 * t28;
	t36 = t61 * t29;
	t42 = t31 * (t61 + t63);
	t61 = t41 * (t75 * t3 + t73 * t7);
	t63 = t41 * (t81 * t3 + t80 * t7);
	t72 = t41 * (t74 * t3 + t72 * t7);
	t73 = pow(t3, 0.2e1);
	t74 = pow(t7, 0.2e1);
	t13 = t74 * t13;
	t11 = t73 * t11;
	t37 = t37 * t3 * t7;
	t28 = t11 * t28;
	t29 = t13 * t29;
	t11 = t31 * (t13 + t11);
	t13 = t50 * t74;
	t31 = t48 * t73;
	t48 = t30 * (mu * (t10 * t47 + t41 * (t51 * t1 + t49 * t4)) + t52 * t17) * t43;
	t50 = t30 * (mu * (t10 * t56 + t41 * (t58 * t32 * t1 + t57 * t33 * t4)) + t59 * t17) * t43;
	t75 = t30 * ((t17 * t60 + t62) * lambda - mu * (-t41 * (t66 * t5 + t67 * t9) - t10 * t65 - t68 + t69 + t70)) * t43;
	t80 = t30 * (-mu * (-t10 * t71 - t76) + t77 * t17) * t43;
	t81 = t30 * (-mu * (-t10 * t79 - t82) + t83 * t17) * t43;
	AScalar t100 = t30 * ((t15 * t17 + t16) * lambda - mu * (-t10 * t85 - t41 * (t20 * t7 * t5 + t27 * t3 * t9) - t86 + t87 + t88)) * t43;
	AScalar t101 = t30 * (mu * (-t10 * t18 - t84) - t89 * t17) * t43;
	AScalar t102 = t30 * (mu * (-t10 * t54 - t90) - t91 * t17) * t43;
	t49 = t30 * (mu * (t41 * (t51 * t19 + t49 * t25) + t47 * t56) + t52 * t55) * t43;
	t51 = t30 * (-mu * (-t47 * t65 - t76) + t52 * t60) * t43;
	t76 = t30 * ((t46 * t64 + t62) * lambda - mu * (-t41 * (t92 * t5 + t93 * t9) - t47 * t71 - t68 + t69 + t70)) * t43;
	AScalar t103 = t30 * (-mu * (-t47 * t79 - t94) + t52 * t78) * t43;
	t84 = t30 * (-mu * (-t47 * t85 - t84) + t52 * t15) * t43;
	AScalar t104 = t30 * ((t44 * t46 + t16) * lambda - mu * (-t18 * t47 - t41 * (t23 * t7 * t5 + t26 * t3 * t9) - t86 + t87 + t88)) * t43;
	t52 = t30 * (-mu * (-t47 * t54 - t21) + t52 * t53) * t43;
	t82 = t30 * (mu * (-t56 * t65 - t82) - t59 * t60) * t43;
	t94 = t30 * (mu * (-t56 * t71 - t94) - t59 * t64) * t43;
	t62 = t30 * ((t55 * t78 + t62) * lambda - mu * (-t41 * (t22 * t5 + t24 * t9) - t56 * t79 - t68 + t69 + t70)) * t43;
	t68 = t30 * (-mu * (-t56 * t85 - t90) + t59 * t15) * t43;
	t21 = t30 * (-mu * (-t18 * t56 - t21) + t59 * t44) * t43;
	t5 = t30 * ((t53 * t55 + t16) * lambda - mu * (-t41 * (t12 * t3 * t9 + t14 * t7 * t5) - t54 * t56 - t86 + t87 + t88)) * t43;
	t9 = t30 * (mu * (t41 * (t97 * t1 + t99 * t4) + t65 * t71) + t77 * t60) * t43;
	t16 = t30 * (mu * (t41 * (t58 * t45 * t1 + t57 * t95 * t4) + t65 * t79) + t83 * t60) * t43;
	t59 = t30 * ((t15 * t60 + t42) * lambda + mu * (t41 * (t67 * t3 + t66 * t7) + t65 * t85 - t35 - t36 + t8)) * t43;
	t66 = t30 * (mu * (t18 * t65 + t61) + t89 * t60) * t43;
	t67 = t30 * (mu * (t54 * t65 + t63) + t91 * t60) * t43;
	t69 = t30 * (mu * (t41 * (t97 * t19 + t99 * t25) + t71 * t79) + t77 * t78) * t43;
	t61 = t30 * (mu * (t71 * t85 + t61) + t77 * t15) * t43;
	t70 = t30 * ((t44 * t64 + t42) * lambda + mu * (t18 * t71 + t41 * (t93 * t3 + t92 * t7) - t35 - t36 + t8)) * t43;
	t77 = t30 * (mu * (t54 * t71 + t72) + t77 * t53) * t43;
	t63 = t30 * (mu * (t79 * t85 + t63) + t83 * t15) * t43;
	t72 = t30 * (mu * (t18 * t79 + t72) + t83 * t44) * t43;
	t3 = t30 * ((t53 * t78 + t42) * lambda + mu * (t41 * (t22 * t7 + t24 * t3) + t54 * t79 - t35 - t36 + t8)) * t43;
	t7 = t30 * (mu * (t18 * t85 + t41 * (t1 * t13 + t31 * t4)) + t89 * t15) * t43;
	t1 = t30 * (mu * (t41 * (t58 * t74 * t1 + t57 * t73 * t4) + t54 * t85) + t91 * t15) * t43;
	t4 = t30 * (mu * (t18 * t54 + t41 * (t19 * t13 + t31 * t25)) + t89 * t53) * t43;
	t8 = t30 * ((pow(t15, 0.2e1) + t11) * lambda + mu * (t41 * (t20 * t74 + t27 * t73 + t37) + pow(t85, 0.2e1) - t28 - t29)) * t43;
	t13 = t30 * ((pow(t78, 0.2e1) + t96) * lambda + mu * (t41 * (t12 * t95 + t14 * t45 + t2) + pow(t79, 0.2e1) - t6 - t98)) * t43;
	t15 = t30 * ((pow(t60, 0.2e1) + t96) * lambda + mu * (t41 * (t20 * t45 + t27 * t95 + t2) + pow(t65, 0.2e1) - t6 - t98)) * t43;
	t19 = t30 * ((pow(t55, 0.2e1) + t34) * lambda + mu * (t41 * (t12 * t33 + t14 * t32 + t38) + pow(t56, 0.2e1) - t39 - t40)) * t43;
	t22 = t30 * ((pow(t46, 0.2e1) + t34) * lambda + mu * (t41 * (t23 * t32 + t26 * t33 + t38) + pow(t47, 0.2e1) - t39 - t40)) * t43;
	t10 = t30 * ((pow(t17, 0.2e1) + t34) * lambda + mu * (t41 * (t20 * t32 + t27 * t33 + t38) + pow(t10, 0.2e1) - t39 - t40)) * t43;
	hessian[0] = -t10;
	hessian[1] = -t48;
	hessian[2] = -t50;
	hessian[3] = t75;
	hessian[4] = t80;
	hessian[5] = t81;
	hessian[6] = t100;
	hessian[7] = -t101;
	hessian[8] = -t102;
	hessian[9] = -t48;
	hessian[10] = -t22;
	hessian[11] = -t49;
	hessian[12] = t51;
	hessian[13] = t76;
	hessian[14] = t103;
	hessian[15] = t84;
	hessian[16] = t104;
	hessian[17] = t52;
	hessian[18] = -t50;
	hessian[19] = -t49;
	hessian[20] = -t19;
	hessian[21] = -t82;
	hessian[22] = -t94;
	hessian[23] = t62;
	hessian[24] = t68;
	hessian[25] = t21;
	hessian[26] = t5;
	hessian[27] = t75;
	hessian[28] = t51;
	hessian[29] = -t82;
	hessian[30] = -t15;
	hessian[31] = -t9;
	hessian[32] = -t16;
	hessian[33] = -t59;
	hessian[34] = -t66;
	hessian[35] = -t67;
	hessian[36] = t80;
	hessian[37] = t76;
	hessian[38] = -t94;
	hessian[39] = -t9;
	hessian[40] = -t30 * ((pow(t64, 0.2e1) + t96) * lambda + mu * (t41 * (t23 * t45 + t26 * t95 + t2) + pow(t71, 0.2e1) - t6 - t98)) * t43;
	hessian[41] = -t69;
	hessian[42] = -t61;
	hessian[43] = -t70;
	hessian[44] = -t77;
	hessian[45] = t81;
	hessian[46] = t103;
	hessian[47] = t62;
	hessian[48] = -t16;
	hessian[49] = -t69;
	hessian[50] = -t13;
	hessian[51] = -t63;
	hessian[52] = -t72;
	hessian[53] = -t3;
	hessian[54] = t100;
	hessian[55] = t84;
	hessian[56] = t68;
	hessian[57] = -t59;
	hessian[58] = -t61;
	hessian[59] = -t63;
	hessian[60] = -t8;
	hessian[61] = -t7;
	hessian[62] = -t1;
	hessian[63] = -t101;
	hessian[64] = t104;
	hessian[65] = t21;
	hessian[66] = -t66;
	hessian[67] = -t70;
	hessian[68] = -t72;
	hessian[69] = -t7;
	hessian[70] = -t30 * ((pow(t44, 0.2e1) + t11) * lambda + mu * (t41 * (t23 * t74 + t26 * t73 + t37) + pow(t18, 0.2e1) - t28 - t29)) * t43;
	hessian[71] = -t4;
	hessian[72] = -t102;
	hessian[73] = t52;
	hessian[74] = t5;
	hessian[75] = -t67;
	hessian[76] = -t77;
	hessian[77] = -t3;
	hessian[78] = -t1;
	hessian[79] = -t4;
	hessian[80] = -t30 * ((pow(t53, 0.2e1) + t11) * lambda + mu * (t41 * (t12 * t73 + t14 * t74 + t37) + pow(t54, 0.2e1) - t28 - t29)) * t43;
	
	return h*Matrix9a(Eigen::Map<Eigen::Matrix<AScalar,9,9,Eigen::ColMajor> >(hessian));
}

#endif
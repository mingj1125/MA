#ifndef MASS_SPRING_STRETCHING_H
#define MASS_SPRING_STRETCHING_H

#include "vector_manipulation.h"

AScalar stretchingEnergyLocal(AScalar ks, const Vector3a& X1, const Vector3a& X2, const Vector3a& x1, const Vector3a& x2)
{

	AScalar q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	AScalar p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	AScalar t4 = pow(p[3] - p[0], 0.2e1);
	AScalar t8 = pow(p[4] - p[1], 0.2e1);
	AScalar t12 = pow(p[5] - p[2], 0.2e1);
	AScalar t16 = pow(q[3] - q[0], 0.2e1);
	AScalar t20 = pow(q[4] - q[1], 0.2e1);
	AScalar t24 = pow(q[5] - q[2], 0.2e1);
	AScalar t26 = pow(-t4 - t8 - t12 + t16 + t20 + t24, 0.2e1);
	AScalar t28 = t4 + t8 + t12;
	AScalar t29 = sqrt(t28);
	return 0.1250000000e0 / t29 / t28 * t26 * ks;
}

void computeStretchingEnergyGradient(AScalar ks, const Vector3a& X1, const Vector3a& X2, const Vector3a& x1, const Vector3a& x2, 
	Vector12a& energygradient){

	AScalar q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	AScalar p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	AScalar t1 = p[0] - p[3];
	AScalar t2 = p[1] - p[4];
	AScalar t3 = p[2] - p[5];
	AScalar t4 = q[0] - q[3];
	AScalar t5 = q[1] - q[4];
	AScalar t6 = q[2] - q[5];
	AScalar t7 = pow(t3, 0.2e1);
	AScalar t8 = pow(t1, 0.2e1);
	AScalar t9 = pow(t2, 0.2e1);
	AScalar t10 = -pow(t4, 0.2e1) - pow(t5, 0.2e1) - pow(t6, 0.2e1) + t7 + t8 + t9;
	t7 = t8 + t9 + t7;
	t8 = pow(t7, -0.5e1 / 0.2e1);
	t7 = t7 * t8 / 0.2e1;
	t8 = t7 - 0.3750000000e0 * t10 * t8;
	t9 = ks * t10;
	t1 = t9 * t1 * t8;
	t2 = t9 * t2 * t8;
	t3 = t9 * t3 * t8;
	t7 = t7 * t9;
	t6 = t7 * t6;
	t4 = t7 * t4;
	t5 = t7 * t5;
	energygradient[0] = -t4;
	energygradient[1] = -t5;
	energygradient[2] = -t6;
	energygradient[3] = t4;
	energygradient[4] = t5;
	energygradient[5] = t6;
	energygradient[6] = t1;
	energygradient[7] = t2;
	energygradient[8] = t3;
	energygradient[9] = -t1;
	energygradient[10] = -t2;
	energygradient[11] = -t3;

}	

void computeStretchingEnergyHessian(AScalar ks, const Vector3a & X1, const Vector3a & X2, const Vector3a & x1, const Vector3a & x2, 
	Matrix12a& energyhessian){
	AScalar q[6]; 
	q[0] = x1(0,0);
	q[1] = x1(1,0);
	q[2] = x1(2,0);
	q[3] = x2(0,0);
	q[4] = x2(1,0);
	q[5] = x2(2,0);
	AScalar p[6]; 
	p[0] = X1(0,0);
	p[1] = X1(1,0);
	p[2] = X1(2,0);
	p[3] = X2(0,0);
	p[4] = X2(1,0);
	p[5] = X2(2,0);

	AScalar t1 = q[0] - q[3];
	AScalar t2 = p[0] - p[3];
	AScalar t3 = p[1] - p[4];
	AScalar t4 = p[2] - p[5];
	AScalar t5 = pow(t2, 0.2e1);
	AScalar t6 = pow(t4, 0.2e1);
	AScalar t7 = pow(t3, 0.2e1);
	AScalar t8 = t6 + t7 + t5;
	AScalar t9 = pow(t8, -0.7e1 / 0.2e1);
	AScalar t10 = pow(t8, 0.2e1) * t9;
	AScalar t11 = q[1] - q[4];
	AScalar t12 = q[2] - q[5];
	AScalar t13 = pow(t12, 0.2e1);
	AScalar t14 = pow(t1, 0.2e1);
	AScalar t15 = pow(t11, 0.2e1);
	AScalar t16 = t6 + t7 - t13 - t14 - t15 + t5;
	AScalar t17 = t16 / 0.2e1;
	AScalar t18 = ks * t10;
	t14 = t18 * (-t17 + t14);
	AScalar t19 = -t14;
	t8 = t8 * t9;
	AScalar t20 = -t10 + 0.3e1 / 0.2e1 * t16 * t8;
	t2 = ks * t2;
	AScalar t21 = t2 * t1 * t20;
	AScalar t22 = ks * t3;
	AScalar t23 = t22 * t1 * t20;
	AScalar t24 = ks * t4;
	AScalar t25 = t24 * t1 * t20;
	AScalar t26 = -t21;
	AScalar t27 = -t23;
	AScalar t28 = -t25;
	AScalar t29 = t18 * t11 * t1;
	AScalar t30 = t18 * t12;
	t1 = t30 * t1;
	t15 = t18 * (-t17 + t15);
	AScalar t31 = -t15;
	AScalar t32 = t2 * t11 * t20;
	AScalar t33 = t22 * t11 * t20;
	AScalar t34 = t24 * t11 * t20;
	AScalar t35 = -t32;
	AScalar t36 = -t33;
	AScalar t37 = -t34;
	t11 = t30 * t11;
	t13 = t18 * (-t17 + t13);
	t18 = -t13;
	t30 = t2 * t12 * t20;
	AScalar t38 = t22 * t12 * t20;
	t12 = t24 * t12 * t20;
	t20 = -t30;
	t24 = -t38;
	AScalar t39 = -t12;
	AScalar t40 = -t21;
	AScalar t41 = -t23;
	AScalar t42 = -t25;
	AScalar t43 = -t32;
	AScalar t44 = -t33;
	AScalar t45 = -t34;
	AScalar t46 = -t30;
	AScalar t47 = -t38;
	AScalar t48 = -t12;
	AScalar t49 = -0.3e1 / 0.8e1 * t16;
	AScalar t50 = 0.1875000000e1 * pow(t16, 0.2e1) * t9;
	t5 = ks * (t10 * (t17 + t5) + t50 * t5 + t16 * (-0.3e1 * t5 + t49) * t8);
	t9 = t16 * (-0.3e1 * t8 + 0.1875000000e1 * t9 * t16) + t10;
	t3 = t2 * t3 * t9;
	t2 = t2 * t4 * t9;
	AScalar t51 = 0.1000000000e1 * t5;
	AScalar t52 = -t51;
	AScalar t53 = -t3;
	AScalar t54 = -t2;
	t7 = ks * (t10 * (t17 + t7) + t50 * t7 + t16 * (-0.3e1 * t7 + t49) * t8);
	t4 = t22 * t4 * t9;
	t9 = -t3;
	t22 = -t7;
	AScalar t55 = -t4;
	t6 = ks * (t10 * (t17 + t6) + t50 * t6 + t16 * (-0.3e1 * t6 + t49) * t8);
	t8 = -t2;
	t10 = -t4;
	t16 = -t6;
	std::vector<Vector12a> hessian(12);
	hessian[0][0] = t14;
	hessian[0][1] = t29;
	hessian[0][2] = t1;
	hessian[0][3] = t19;
	hessian[0][4] = -t29;
	hessian[0][5] = -t1;
	hessian[0][6] = t21;
	hessian[0][7] = t23;
	hessian[0][8] = t25;
	hessian[0][9] = t26;
	hessian[0][10] = t27;
	hessian[0][11] = t28;
	hessian[1][0] = t29;
	hessian[1][1] = t15;
	hessian[1][2] = t11;
	hessian[1][3] = -t29;
	hessian[1][4] = t31;
	hessian[1][5] = -t11;
	hessian[1][6] = t32;
	hessian[1][7] = t33;
	hessian[1][8] = t34;
	hessian[1][9] = t35;
	hessian[1][10] = t36;
	hessian[1][11] = t37;
	hessian[2][0] = t1;
	hessian[2][1] = t11;
	hessian[2][2] = t13;
	hessian[2][3] = -t1;
	hessian[2][4] = -t11;
	hessian[2][5] = t18;
	hessian[2][6] = t30;
	hessian[2][7] = t38;
	hessian[2][8] = t12;
	hessian[2][9] = t20;
	hessian[2][10] = t24;
	hessian[2][11] = t39;
	hessian[3][0] = t19;
	hessian[3][1] = -t29;
	hessian[3][2] = -t1;
	hessian[3][3] = t14;
	hessian[3][4] = t29;
	hessian[3][5] = t1;
	hessian[3][6] = t40;
	hessian[3][7] = t41;
	hessian[3][8] = t42;
	hessian[3][9] = t21;
	hessian[3][10] = t23;
	hessian[3][11] = t25;
	hessian[4][0] = -t29;
	hessian[4][1] = t31;
	hessian[4][2] = -t11;
	hessian[4][3] = t29;
	hessian[4][4] = t15;
	hessian[4][5] = t11;
	hessian[4][6] = t43;
	hessian[4][7] = t44;
	hessian[4][8] = t45;
	hessian[4][9] = t32;
	hessian[4][10] = t33;
	hessian[4][11] = t34;
	hessian[5][0] = -t1;
	hessian[5][1] = -t11;
	hessian[5][2] = t18;
	hessian[5][3] = t1;
	hessian[5][4] = t11;
	hessian[5][5] = t13;
	hessian[5][6] = t46;
	hessian[5][7] = t47;
	hessian[5][8] = t48;
	hessian[5][9] = t30;
	hessian[5][10] = t38;
	hessian[5][11] = t12;
	hessian[6][0] = t21;
	hessian[6][1] = t32;
	hessian[6][2] = t30;
	hessian[6][3] = t40;
	hessian[6][4] = t43;
	hessian[6][5] = t46;
	hessian[6][6] = t5;
	hessian[6][7] = t3;
	hessian[6][8] = t2;
	hessian[6][9] = t52;
	hessian[6][10] = t53;
	hessian[6][11] = t54;
	hessian[7][0] = t23;
	hessian[7][1] = t33;
	hessian[7][2] = t38;
	hessian[7][3] = t41;
	hessian[7][4] = t44;
	hessian[7][5] = t47;
	hessian[7][6] = t3;
	hessian[7][7] = t7;
	hessian[7][8] = t4;
	hessian[7][9] = t9;
	hessian[7][10] = t22;
	hessian[7][11] = t55;
	hessian[8][0] = t25;
	hessian[8][1] = t34;
	hessian[8][2] = t12;
	hessian[8][3] = t42;
	hessian[8][4] = t45;
	hessian[8][5] = t48;
	hessian[8][6] = t2;
	hessian[8][7] = t4;
	hessian[8][8] = t6;
	hessian[8][9] = t8;
	hessian[8][10] = t10;
	hessian[8][11] = t16;
	hessian[9][0] = t26;
	hessian[9][1] = t35;
	hessian[9][2] = t20;
	hessian[9][3] = t21;
	hessian[9][4] = t32;
	hessian[9][5] = t30;
	hessian[9][6] = t52;
	hessian[9][7] = t9;
	hessian[9][8] = t8;
	hessian[9][9] = t51;
	hessian[9][10] = t3;
	hessian[9][11] = t2;
	hessian[10][0] = t27;
	hessian[10][1] = t36;
	hessian[10][2] = t24;
	hessian[10][3] = t23;
	hessian[10][4] = t33;
	hessian[10][5] = t38;
	hessian[10][6] = t53;
	hessian[10][7] = t22;
	hessian[10][8] = t10;
	hessian[10][9] = t3;
	hessian[10][10] = t7;
	hessian[10][11] = t4;
	hessian[11][0] = t28;
	hessian[11][1] = t37;
	hessian[11][2] = t39;
	hessian[11][3] = t25;
	hessian[11][4] = t34;
	hessian[11][5] = t12;
	hessian[11][6] = t54;
	hessian[11][7] = t55;
	hessian[11][8] = t16;
	hessian[11][9] = t2;
	hessian[11][10] = t4;
	hessian[11][11] = t6;
	for(int i = 0; i < 12; ++i){
		energyhessian.col(i) = hessian[i];
	}
}

#endif